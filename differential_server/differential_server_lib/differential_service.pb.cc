// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: differential_service.proto

#include "differential_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_differential_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_float_comparison_differential_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_differential_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ignoreCriteria_differential_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_differential_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mapvalueTuple_differential_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_differential_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_repeatedFieldTuple_differential_5fservice_2eproto;
namespace differentialservice {
class MsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRequest> _instance;
} _MsgRequest_default_instance_;
class MsgReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgReply> _instance;
} _MsgReply_default_instance_;
class ignoreCriteriaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ignoreCriteria> _instance;
} _ignoreCriteria_default_instance_;
class repeatedFieldTupleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<repeatedFieldTuple> _instance;
} _repeatedFieldTuple_default_instance_;
class mapvalueTupleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mapvalueTuple> _instance;
} _mapvalueTuple_default_instance_;
class float_comparisonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<float_comparison> _instance;
} _float_comparison_default_instance_;
class logDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<log> _instance;
} _log_default_instance_;
class resultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<result> _instance;
} _result_default_instance_;
}  // namespace differentialservice
static void InitDefaultsscc_info_MsgReply_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differentialservice::_MsgReply_default_instance_;
    new (ptr) ::differentialservice::MsgReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differentialservice::MsgReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgReply_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgReply_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_MsgRequest_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differentialservice::_MsgRequest_default_instance_;
    new (ptr) ::differentialservice::MsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differentialservice::MsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRequest_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRequest_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_float_comparison_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differentialservice::_float_comparison_default_instance_;
    new (ptr) ::differentialservice::float_comparison();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differentialservice::float_comparison::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_float_comparison_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_float_comparison_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ignoreCriteria_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differentialservice::_ignoreCriteria_default_instance_;
    new (ptr) ::differentialservice::ignoreCriteria();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differentialservice::ignoreCriteria::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ignoreCriteria_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ignoreCriteria_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_log_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differentialservice::_log_default_instance_;
    new (ptr) ::differentialservice::log();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differentialservice::log::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_log_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_log_differential_5fservice_2eproto}, {
      &scc_info_ignoreCriteria_differential_5fservice_2eproto.base,
      &scc_info_repeatedFieldTuple_differential_5fservice_2eproto.base,
      &scc_info_mapvalueTuple_differential_5fservice_2eproto.base,
      &scc_info_float_comparison_differential_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_mapvalueTuple_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differentialservice::_mapvalueTuple_default_instance_;
    new (ptr) ::differentialservice::mapvalueTuple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differentialservice::mapvalueTuple::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mapvalueTuple_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_mapvalueTuple_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_repeatedFieldTuple_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differentialservice::_repeatedFieldTuple_default_instance_;
    new (ptr) ::differentialservice::repeatedFieldTuple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differentialservice::repeatedFieldTuple::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_repeatedFieldTuple_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_repeatedFieldTuple_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_result_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differentialservice::_result_default_instance_;
    new (ptr) ::differentialservice::result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differentialservice::result::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_result_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_result_differential_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_differential_5fservice_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_differential_5fservice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_differential_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_differential_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differentialservice::MsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differentialservice::MsgRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differentialservice::MsgReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differentialservice::MsgReply, reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differentialservice::ignoreCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differentialservice::ignoreCriteria, flag_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::ignoreCriteria, ignore_fields_list_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::ignoreCriteria, regex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differentialservice::repeatedFieldTuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differentialservice::repeatedFieldTuple, flag_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::repeatedFieldTuple, field_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differentialservice::mapvalueTuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differentialservice::mapvalueTuple, name_of_repeated_field_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::mapvalueTuple, name_of_sub_field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differentialservice::float_comparison, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differentialservice::float_comparison, fraction_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::float_comparison, margin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differentialservice::log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differentialservice::log, message_1_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::log, message_2_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::log, name_of_message_descriptor_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::log, file_descriptor_proto_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::log, user_ignore_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::log, repeated_field_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::log, mapvaluecompare_),
  PROTOBUF_FIELD_OFFSET(::differentialservice::log, fraction_margin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differentialservice::result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differentialservice::result, res_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::differentialservice::MsgRequest)},
  { 6, -1, sizeof(::differentialservice::MsgReply)},
  { 12, -1, sizeof(::differentialservice::ignoreCriteria)},
  { 20, -1, sizeof(::differentialservice::repeatedFieldTuple)},
  { 27, -1, sizeof(::differentialservice::mapvalueTuple)},
  { 34, -1, sizeof(::differentialservice::float_comparison)},
  { 41, -1, sizeof(::differentialservice::log)},
  { 54, -1, sizeof(::differentialservice::result)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differentialservice::_MsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differentialservice::_MsgReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differentialservice::_ignoreCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differentialservice::_repeatedFieldTuple_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differentialservice::_mapvalueTuple_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differentialservice::_float_comparison_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differentialservice::_log_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differentialservice::_result_default_instance_),
};

const char descriptor_table_protodef_differential_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032differential_service.proto\022\023differenti"
  "alservice\"\035\n\nMsgRequest\022\017\n\007request\030\001 \001(\t"
  "\"\031\n\010MsgReply\022\r\n\005reply\030\001 \001(\t\"\252\001\n\016ignoreCr"
  "iteria\022<\n\004flag\030\001 \001(\0162..differentialservi"
  "ce.ignoreCriteria.ignoreFlag\022\032\n\022ignore_f"
  "ields_list\030\002 \003(\t\022\r\n\005regex\030\003 \001(\t\"/\n\nignor"
  "eFlag\022\017\n\013FLAG_IGNORE\020\000\022\020\n\014FLAG_COMPARE\020\001"
  "\"\227\001\n\022repeatedFieldTuple\022A\n\004flag\030\001 \001(\01623."
  "differentialservice.repeatedFieldTuple.t"
  "reatAsFlag\022\022\n\nfield_name\030\002 \001(\t\"*\n\013treatA"
  "sFlag\022\r\n\tFLAG_LIST\020\000\022\014\n\010FLAG_SET\020\001\"J\n\rma"
  "pvalueTuple\022\036\n\026name_of_repeated_field\030\001 "
  "\001(\t\022\031\n\021name_of_sub_field\030\002 \003(\t\"4\n\020float_"
  "comparison\022\020\n\010fraction\030\001 \001(\002\022\016\n\006margin\030\002"
  " \001(\002\"\346\002\n\003log\022\021\n\tmessage_1\030\001 \001(\014\022\021\n\tmessa"
  "ge_2\030\002 \001(\014\022\"\n\032name_of_message_descriptor"
  "\030\003 \001(\t\022\035\n\025file_descriptor_proto\030\004 \003(\014\0228\n"
  "\013user_ignore\030\005 \001(\0132#.differentialservice"
  ".ignoreCriteria\022\?\n\016repeated_field\030\006 \003(\0132"
  "\'.differentialservice.repeatedFieldTuple"
  "\022;\n\017mapvaluecompare\030\007 \003(\0132\".differential"
  "service.mapvalueTuple\022>\n\017fraction_margin"
  "\030\010 \001(\0132%.differentialservice.float_compa"
  "rison\"\025\n\006result\022\013\n\003res\030\001 \001(\t2\213\002\n\022Differe"
  "ntialServer\022N\n\nGetConnect\022\037.differential"
  "service.MsgRequest\032\035.differentialservice"
  ".MsgReply\"\000\022U\n\032DefaultDifferentialServic"
  "e\022\030.differentialservice.log\032\033.differenti"
  "alservice.result\"\000\022N\n\023DifferentialServic"
  "e\022\030.differentialservice.log\032\033.differenti"
  "alservice.result\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_differential_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_differential_5fservice_2eproto_sccs[8] = {
  &scc_info_MsgReply_differential_5fservice_2eproto.base,
  &scc_info_MsgRequest_differential_5fservice_2eproto.base,
  &scc_info_float_comparison_differential_5fservice_2eproto.base,
  &scc_info_ignoreCriteria_differential_5fservice_2eproto.base,
  &scc_info_log_differential_5fservice_2eproto.base,
  &scc_info_mapvalueTuple_differential_5fservice_2eproto.base,
  &scc_info_repeatedFieldTuple_differential_5fservice_2eproto.base,
  &scc_info_result_differential_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_differential_5fservice_2eproto_once;
static bool descriptor_table_differential_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_differential_5fservice_2eproto = {
  &descriptor_table_differential_5fservice_2eproto_initialized, descriptor_table_protodef_differential_5fservice_2eproto, "differential_service.proto", 1226,
  &descriptor_table_differential_5fservice_2eproto_once, descriptor_table_differential_5fservice_2eproto_sccs, descriptor_table_differential_5fservice_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_differential_5fservice_2eproto::offsets,
  file_level_metadata_differential_5fservice_2eproto, 8, file_level_enum_descriptors_differential_5fservice_2eproto, file_level_service_descriptors_differential_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_differential_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_differential_5fservice_2eproto), true);
namespace differentialservice {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ignoreCriteria_ignoreFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_differential_5fservice_2eproto);
  return file_level_enum_descriptors_differential_5fservice_2eproto[0];
}
bool ignoreCriteria_ignoreFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ignoreCriteria_ignoreFlag ignoreCriteria::FLAG_IGNORE;
constexpr ignoreCriteria_ignoreFlag ignoreCriteria::FLAG_COMPARE;
constexpr ignoreCriteria_ignoreFlag ignoreCriteria::ignoreFlag_MIN;
constexpr ignoreCriteria_ignoreFlag ignoreCriteria::ignoreFlag_MAX;
constexpr int ignoreCriteria::ignoreFlag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* repeatedFieldTuple_treatAsFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_differential_5fservice_2eproto);
  return file_level_enum_descriptors_differential_5fservice_2eproto[1];
}
bool repeatedFieldTuple_treatAsFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr repeatedFieldTuple_treatAsFlag repeatedFieldTuple::FLAG_LIST;
constexpr repeatedFieldTuple_treatAsFlag repeatedFieldTuple::FLAG_SET;
constexpr repeatedFieldTuple_treatAsFlag repeatedFieldTuple::treatAsFlag_MIN;
constexpr repeatedFieldTuple_treatAsFlag repeatedFieldTuple::treatAsFlag_MAX;
constexpr int repeatedFieldTuple::treatAsFlag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MsgRequest::InitAsDefaultInstance() {
}
class MsgRequest::_Internal {
 public:
};

MsgRequest::MsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differentialservice.MsgRequest)
}
MsgRequest::MsgRequest(const MsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request().empty()) {
    request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_);
  }
  // @@protoc_insertion_point(copy_constructor:differentialservice.MsgRequest)
}

void MsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgRequest_differential_5fservice_2eproto.base);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MsgRequest::~MsgRequest() {
  // @@protoc_insertion_point(destructor:differentialservice.MsgRequest)
  SharedDtor();
}

void MsgRequest::SharedDtor() {
  request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRequest& MsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRequest_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:differentialservice.MsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differentialservice.MsgRequest.request"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differentialservice.MsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request = 1;
  if (this->request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request().data(), static_cast<int>(this->_internal_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differentialservice.MsgRequest.request");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differentialservice.MsgRequest)
  return target;
}

size_t MsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differentialservice.MsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request = 1;
  if (this->request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differentialservice.MsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differentialservice.MsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differentialservice.MsgRequest)
    MergeFrom(*source);
  }
}

void MsgRequest::MergeFrom(const MsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differentialservice.MsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request().size() > 0) {

    request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_);
  }
}

void MsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differentialservice.MsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRequest::CopyFrom(const MsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differentialservice.MsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRequest::IsInitialized() const {
  return true;
}

void MsgRequest::InternalSwap(MsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_.Swap(&other->request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgReply::InitAsDefaultInstance() {
}
class MsgReply::_Internal {
 public:
};

MsgReply::MsgReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differentialservice.MsgReply)
}
MsgReply::MsgReply(const MsgReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reply().empty()) {
    reply_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reply_);
  }
  // @@protoc_insertion_point(copy_constructor:differentialservice.MsgReply)
}

void MsgReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgReply_differential_5fservice_2eproto.base);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MsgReply::~MsgReply() {
  // @@protoc_insertion_point(destructor:differentialservice.MsgReply)
  SharedDtor();
}

void MsgReply::SharedDtor() {
  reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgReply& MsgReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgReply_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MsgReply::Clear() {
// @@protoc_insertion_point(message_clear_start:differentialservice.MsgReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MsgReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differentialservice.MsgReply.reply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differentialservice.MsgReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reply = 1;
  if (this->reply().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply().data(), static_cast<int>(this->_internal_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differentialservice.MsgReply.reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differentialservice.MsgReply)
  return target;
}

size_t MsgReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differentialservice.MsgReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reply = 1;
  if (this->reply().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differentialservice.MsgReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differentialservice.MsgReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differentialservice.MsgReply)
    MergeFrom(*source);
  }
}

void MsgReply::MergeFrom(const MsgReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differentialservice.MsgReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reply().size() > 0) {

    reply_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reply_);
  }
}

void MsgReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differentialservice.MsgReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReply::CopyFrom(const MsgReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differentialservice.MsgReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReply::IsInitialized() const {
  return true;
}

void MsgReply::InternalSwap(MsgReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reply_.Swap(&other->reply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ignoreCriteria::InitAsDefaultInstance() {
}
class ignoreCriteria::_Internal {
 public:
};

ignoreCriteria::ignoreCriteria()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differentialservice.ignoreCriteria)
}
ignoreCriteria::ignoreCriteria(const ignoreCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ignore_fields_list_(from.ignore_fields_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regex().empty()) {
    regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:differentialservice.ignoreCriteria)
}

void ignoreCriteria::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ignoreCriteria_differential_5fservice_2eproto.base);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

ignoreCriteria::~ignoreCriteria() {
  // @@protoc_insertion_point(destructor:differentialservice.ignoreCriteria)
  SharedDtor();
}

void ignoreCriteria::SharedDtor() {
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ignoreCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ignoreCriteria& ignoreCriteria::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ignoreCriteria_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ignoreCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:differentialservice.ignoreCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignore_fields_list_.Clear();
  regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

const char* ignoreCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .differentialservice.ignoreCriteria.ignoreFlag flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::differentialservice::ignoreCriteria_ignoreFlag>(val));
        } else goto handle_unusual;
        continue;
      // repeated string ignore_fields_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ignore_fields_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differentialservice.ignoreCriteria.ignore_fields_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string regex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differentialservice.ignoreCriteria.regex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ignoreCriteria::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differentialservice.ignoreCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .differentialservice.ignoreCriteria.ignoreFlag flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flag(), target);
  }

  // repeated string ignore_fields_list = 2;
  for (int i = 0, n = this->_internal_ignore_fields_list_size(); i < n; i++) {
    const auto& s = this->_internal_ignore_fields_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differentialservice.ignoreCriteria.ignore_fields_list");
    target = stream->WriteString(2, s, target);
  }

  // string regex = 3;
  if (this->regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differentialservice.ignoreCriteria.regex");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differentialservice.ignoreCriteria)
  return target;
}

size_t ignoreCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differentialservice.ignoreCriteria)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ignore_fields_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ignore_fields_list_.size());
  for (int i = 0, n = ignore_fields_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ignore_fields_list_.Get(i));
  }

  // string regex = 3;
  if (this->regex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  // .differentialservice.ignoreCriteria.ignoreFlag flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ignoreCriteria::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differentialservice.ignoreCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const ignoreCriteria* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ignoreCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differentialservice.ignoreCriteria)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differentialservice.ignoreCriteria)
    MergeFrom(*source);
  }
}

void ignoreCriteria::MergeFrom(const ignoreCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differentialservice.ignoreCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ignore_fields_list_.MergeFrom(from.ignore_fields_list_);
  if (from.regex().size() > 0) {

    regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void ignoreCriteria::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differentialservice.ignoreCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ignoreCriteria::CopyFrom(const ignoreCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differentialservice.ignoreCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ignoreCriteria::IsInitialized() const {
  return true;
}

void ignoreCriteria::InternalSwap(ignoreCriteria* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ignore_fields_list_.InternalSwap(&other->ignore_fields_list_);
  regex_.Swap(&other->regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ignoreCriteria::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void repeatedFieldTuple::InitAsDefaultInstance() {
}
class repeatedFieldTuple::_Internal {
 public:
};

repeatedFieldTuple::repeatedFieldTuple()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differentialservice.repeatedFieldTuple)
}
repeatedFieldTuple::repeatedFieldTuple(const repeatedFieldTuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_name().empty()) {
    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:differentialservice.repeatedFieldTuple)
}

void repeatedFieldTuple::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_repeatedFieldTuple_differential_5fservice_2eproto.base);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

repeatedFieldTuple::~repeatedFieldTuple() {
  // @@protoc_insertion_point(destructor:differentialservice.repeatedFieldTuple)
  SharedDtor();
}

void repeatedFieldTuple::SharedDtor() {
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void repeatedFieldTuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const repeatedFieldTuple& repeatedFieldTuple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_repeatedFieldTuple_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void repeatedFieldTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:differentialservice.repeatedFieldTuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

const char* repeatedFieldTuple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .differentialservice.repeatedFieldTuple.treatAsFlag flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::differentialservice::repeatedFieldTuple_treatAsFlag>(val));
        } else goto handle_unusual;
        continue;
      // string field_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differentialservice.repeatedFieldTuple.field_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* repeatedFieldTuple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differentialservice.repeatedFieldTuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .differentialservice.repeatedFieldTuple.treatAsFlag flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flag(), target);
  }

  // string field_name = 2;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differentialservice.repeatedFieldTuple.field_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differentialservice.repeatedFieldTuple)
  return target;
}

size_t repeatedFieldTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differentialservice.repeatedFieldTuple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field_name = 2;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // .differentialservice.repeatedFieldTuple.treatAsFlag flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void repeatedFieldTuple::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differentialservice.repeatedFieldTuple)
  GOOGLE_DCHECK_NE(&from, this);
  const repeatedFieldTuple* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<repeatedFieldTuple>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differentialservice.repeatedFieldTuple)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differentialservice.repeatedFieldTuple)
    MergeFrom(*source);
  }
}

void repeatedFieldTuple::MergeFrom(const repeatedFieldTuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differentialservice.repeatedFieldTuple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void repeatedFieldTuple::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differentialservice.repeatedFieldTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void repeatedFieldTuple::CopyFrom(const repeatedFieldTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differentialservice.repeatedFieldTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool repeatedFieldTuple::IsInitialized() const {
  return true;
}

void repeatedFieldTuple::InternalSwap(repeatedFieldTuple* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata repeatedFieldTuple::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mapvalueTuple::InitAsDefaultInstance() {
}
class mapvalueTuple::_Internal {
 public:
};

mapvalueTuple::mapvalueTuple()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differentialservice.mapvalueTuple)
}
mapvalueTuple::mapvalueTuple(const mapvalueTuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      name_of_sub_field_(from.name_of_sub_field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_of_repeated_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_of_repeated_field().empty()) {
    name_of_repeated_field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_of_repeated_field_);
  }
  // @@protoc_insertion_point(copy_constructor:differentialservice.mapvalueTuple)
}

void mapvalueTuple::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mapvalueTuple_differential_5fservice_2eproto.base);
  name_of_repeated_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

mapvalueTuple::~mapvalueTuple() {
  // @@protoc_insertion_point(destructor:differentialservice.mapvalueTuple)
  SharedDtor();
}

void mapvalueTuple::SharedDtor() {
  name_of_repeated_field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mapvalueTuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mapvalueTuple& mapvalueTuple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mapvalueTuple_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void mapvalueTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:differentialservice.mapvalueTuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_of_sub_field_.Clear();
  name_of_repeated_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* mapvalueTuple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name_of_repeated_field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name_of_repeated_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differentialservice.mapvalueTuple.name_of_repeated_field"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string name_of_sub_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name_of_sub_field();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differentialservice.mapvalueTuple.name_of_sub_field"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mapvalueTuple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differentialservice.mapvalueTuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name_of_repeated_field = 1;
  if (this->name_of_repeated_field().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_of_repeated_field().data(), static_cast<int>(this->_internal_name_of_repeated_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differentialservice.mapvalueTuple.name_of_repeated_field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_of_repeated_field(), target);
  }

  // repeated string name_of_sub_field = 2;
  for (int i = 0, n = this->_internal_name_of_sub_field_size(); i < n; i++) {
    const auto& s = this->_internal_name_of_sub_field(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differentialservice.mapvalueTuple.name_of_sub_field");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differentialservice.mapvalueTuple)
  return target;
}

size_t mapvalueTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differentialservice.mapvalueTuple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name_of_sub_field = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_of_sub_field_.size());
  for (int i = 0, n = name_of_sub_field_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_of_sub_field_.Get(i));
  }

  // string name_of_repeated_field = 1;
  if (this->name_of_repeated_field().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_of_repeated_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mapvalueTuple::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differentialservice.mapvalueTuple)
  GOOGLE_DCHECK_NE(&from, this);
  const mapvalueTuple* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mapvalueTuple>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differentialservice.mapvalueTuple)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differentialservice.mapvalueTuple)
    MergeFrom(*source);
  }
}

void mapvalueTuple::MergeFrom(const mapvalueTuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differentialservice.mapvalueTuple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_of_sub_field_.MergeFrom(from.name_of_sub_field_);
  if (from.name_of_repeated_field().size() > 0) {

    name_of_repeated_field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_of_repeated_field_);
  }
}

void mapvalueTuple::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differentialservice.mapvalueTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mapvalueTuple::CopyFrom(const mapvalueTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differentialservice.mapvalueTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapvalueTuple::IsInitialized() const {
  return true;
}

void mapvalueTuple::InternalSwap(mapvalueTuple* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_of_sub_field_.InternalSwap(&other->name_of_sub_field_);
  name_of_repeated_field_.Swap(&other->name_of_repeated_field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata mapvalueTuple::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void float_comparison::InitAsDefaultInstance() {
}
class float_comparison::_Internal {
 public:
};

float_comparison::float_comparison()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differentialservice.float_comparison)
}
float_comparison::float_comparison(const float_comparison& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fraction_, &from.fraction_,
    static_cast<size_t>(reinterpret_cast<char*>(&margin_) -
    reinterpret_cast<char*>(&fraction_)) + sizeof(margin_));
  // @@protoc_insertion_point(copy_constructor:differentialservice.float_comparison)
}

void float_comparison::SharedCtor() {
  ::memset(&fraction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&margin_) -
      reinterpret_cast<char*>(&fraction_)) + sizeof(margin_));
}

float_comparison::~float_comparison() {
  // @@protoc_insertion_point(destructor:differentialservice.float_comparison)
  SharedDtor();
}

void float_comparison::SharedDtor() {
}

void float_comparison::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const float_comparison& float_comparison::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_float_comparison_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void float_comparison::Clear() {
// @@protoc_insertion_point(message_clear_start:differentialservice.float_comparison)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fraction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&margin_) -
      reinterpret_cast<char*>(&fraction_)) + sizeof(margin_));
  _internal_metadata_.Clear();
}

const char* float_comparison::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float fraction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float margin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* float_comparison::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differentialservice.float_comparison)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fraction = 1;
  if (!(this->fraction() <= 0 && this->fraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fraction(), target);
  }

  // float margin = 2;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_margin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differentialservice.float_comparison)
  return target;
}

size_t float_comparison::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differentialservice.float_comparison)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fraction = 1;
  if (!(this->fraction() <= 0 && this->fraction() >= 0)) {
    total_size += 1 + 4;
  }

  // float margin = 2;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void float_comparison::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differentialservice.float_comparison)
  GOOGLE_DCHECK_NE(&from, this);
  const float_comparison* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<float_comparison>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differentialservice.float_comparison)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differentialservice.float_comparison)
    MergeFrom(*source);
  }
}

void float_comparison::MergeFrom(const float_comparison& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differentialservice.float_comparison)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fraction() <= 0 && from.fraction() >= 0)) {
    _internal_set_fraction(from._internal_fraction());
  }
  if (!(from.margin() <= 0 && from.margin() >= 0)) {
    _internal_set_margin(from._internal_margin());
  }
}

void float_comparison::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differentialservice.float_comparison)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void float_comparison::CopyFrom(const float_comparison& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differentialservice.float_comparison)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool float_comparison::IsInitialized() const {
  return true;
}

void float_comparison::InternalSwap(float_comparison* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fraction_, other->fraction_);
  swap(margin_, other->margin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata float_comparison::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void log::InitAsDefaultInstance() {
  ::differentialservice::_log_default_instance_._instance.get_mutable()->user_ignore_ = const_cast< ::differentialservice::ignoreCriteria*>(
      ::differentialservice::ignoreCriteria::internal_default_instance());
  ::differentialservice::_log_default_instance_._instance.get_mutable()->fraction_margin_ = const_cast< ::differentialservice::float_comparison*>(
      ::differentialservice::float_comparison::internal_default_instance());
}
class log::_Internal {
 public:
  static const ::differentialservice::ignoreCriteria& user_ignore(const log* msg);
  static const ::differentialservice::float_comparison& fraction_margin(const log* msg);
};

const ::differentialservice::ignoreCriteria&
log::_Internal::user_ignore(const log* msg) {
  return *msg->user_ignore_;
}
const ::differentialservice::float_comparison&
log::_Internal::fraction_margin(const log* msg) {
  return *msg->fraction_margin_;
}
log::log()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differentialservice.log)
}
log::log(const log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      file_descriptor_proto_(from.file_descriptor_proto_),
      repeated_field_(from.repeated_field_),
      mapvaluecompare_(from.mapvaluecompare_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_1().empty()) {
    message_1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_1_);
  }
  message_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_2().empty()) {
    message_2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_2_);
  }
  name_of_message_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_of_message_descriptor().empty()) {
    name_of_message_descriptor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_of_message_descriptor_);
  }
  if (from._internal_has_user_ignore()) {
    user_ignore_ = new ::differentialservice::ignoreCriteria(*from.user_ignore_);
  } else {
    user_ignore_ = nullptr;
  }
  if (from._internal_has_fraction_margin()) {
    fraction_margin_ = new ::differentialservice::float_comparison(*from.fraction_margin_);
  } else {
    fraction_margin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:differentialservice.log)
}

void log::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_log_differential_5fservice_2eproto.base);
  message_1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_of_message_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_ignore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fraction_margin_) -
      reinterpret_cast<char*>(&user_ignore_)) + sizeof(fraction_margin_));
}

log::~log() {
  // @@protoc_insertion_point(destructor:differentialservice.log)
  SharedDtor();
}

void log::SharedDtor() {
  message_1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_of_message_descriptor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_ignore_;
  if (this != internal_default_instance()) delete fraction_margin_;
}

void log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const log& log::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_log_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void log::Clear() {
// @@protoc_insertion_point(message_clear_start:differentialservice.log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_descriptor_proto_.Clear();
  repeated_field_.Clear();
  mapvaluecompare_.Clear();
  message_1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_of_message_descriptor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ignore_ != nullptr) {
    delete user_ignore_;
  }
  user_ignore_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fraction_margin_ != nullptr) {
    delete fraction_margin_;
  }
  fraction_margin_ = nullptr;
  _internal_metadata_.Clear();
}

const char* log::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes message_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes message_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name_of_message_descriptor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name_of_message_descriptor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differentialservice.log.name_of_message_descriptor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes file_descriptor_proto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_file_descriptor_proto();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .differentialservice.ignoreCriteria user_ignore = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_ignore(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .differentialservice.repeatedFieldTuple repeated_field = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .differentialservice.mapvalueTuple mapvaluecompare = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapvaluecompare(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .differentialservice.float_comparison fraction_margin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fraction_margin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* log::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differentialservice.log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message_1 = 1;
  if (this->message_1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message_1(), target);
  }

  // bytes message_2 = 2;
  if (this->message_2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message_2(), target);
  }

  // string name_of_message_descriptor = 3;
  if (this->name_of_message_descriptor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_of_message_descriptor().data(), static_cast<int>(this->_internal_name_of_message_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differentialservice.log.name_of_message_descriptor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name_of_message_descriptor(), target);
  }

  // repeated bytes file_descriptor_proto = 4;
  for (int i = 0, n = this->_internal_file_descriptor_proto_size(); i < n; i++) {
    const auto& s = this->_internal_file_descriptor_proto(i);
    target = stream->WriteBytes(4, s, target);
  }

  // .differentialservice.ignoreCriteria user_ignore = 5;
  if (this->has_user_ignore()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::user_ignore(this), target, stream);
  }

  // repeated .differentialservice.repeatedFieldTuple repeated_field = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_repeated_field(i), target, stream);
  }

  // repeated .differentialservice.mapvalueTuple mapvaluecompare = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mapvaluecompare_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_mapvaluecompare(i), target, stream);
  }

  // .differentialservice.float_comparison fraction_margin = 8;
  if (this->has_fraction_margin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::fraction_margin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differentialservice.log)
  return target;
}

size_t log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differentialservice.log)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes file_descriptor_proto = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(file_descriptor_proto_.size());
  for (int i = 0, n = file_descriptor_proto_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      file_descriptor_proto_.Get(i));
  }

  // repeated .differentialservice.repeatedFieldTuple repeated_field = 6;
  total_size += 1UL * this->_internal_repeated_field_size();
  for (const auto& msg : this->repeated_field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .differentialservice.mapvalueTuple mapvaluecompare = 7;
  total_size += 1UL * this->_internal_mapvaluecompare_size();
  for (const auto& msg : this->mapvaluecompare_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes message_1 = 1;
  if (this->message_1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message_1());
  }

  // bytes message_2 = 2;
  if (this->message_2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message_2());
  }

  // string name_of_message_descriptor = 3;
  if (this->name_of_message_descriptor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_of_message_descriptor());
  }

  // .differentialservice.ignoreCriteria user_ignore = 5;
  if (this->has_user_ignore()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_ignore_);
  }

  // .differentialservice.float_comparison fraction_margin = 8;
  if (this->has_fraction_margin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fraction_margin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void log::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differentialservice.log)
  GOOGLE_DCHECK_NE(&from, this);
  const log* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<log>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differentialservice.log)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differentialservice.log)
    MergeFrom(*source);
  }
}

void log::MergeFrom(const log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differentialservice.log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_descriptor_proto_.MergeFrom(from.file_descriptor_proto_);
  repeated_field_.MergeFrom(from.repeated_field_);
  mapvaluecompare_.MergeFrom(from.mapvaluecompare_);
  if (from.message_1().size() > 0) {

    message_1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_1_);
  }
  if (from.message_2().size() > 0) {

    message_2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_2_);
  }
  if (from.name_of_message_descriptor().size() > 0) {

    name_of_message_descriptor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_of_message_descriptor_);
  }
  if (from.has_user_ignore()) {
    _internal_mutable_user_ignore()->::differentialservice::ignoreCriteria::MergeFrom(from._internal_user_ignore());
  }
  if (from.has_fraction_margin()) {
    _internal_mutable_fraction_margin()->::differentialservice::float_comparison::MergeFrom(from._internal_fraction_margin());
  }
}

void log::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differentialservice.log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log::CopyFrom(const log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differentialservice.log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log::IsInitialized() const {
  return true;
}

void log::InternalSwap(log* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_descriptor_proto_.InternalSwap(&other->file_descriptor_proto_);
  repeated_field_.InternalSwap(&other->repeated_field_);
  mapvaluecompare_.InternalSwap(&other->mapvaluecompare_);
  message_1_.Swap(&other->message_1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_2_.Swap(&other->message_2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_of_message_descriptor_.Swap(&other->name_of_message_descriptor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_ignore_, other->user_ignore_);
  swap(fraction_margin_, other->fraction_margin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata log::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void result::InitAsDefaultInstance() {
}
class result::_Internal {
 public:
};

result::result()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differentialservice.result)
}
result::result(const result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res().empty()) {
    res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_);
  }
  // @@protoc_insertion_point(copy_constructor:differentialservice.result)
}

void result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_result_differential_5fservice_2eproto.base);
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

result::~result() {
  // @@protoc_insertion_point(destructor:differentialservice.result)
  SharedDtor();
}

void result::SharedDtor() {
  res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const result& result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_result_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void result::Clear() {
// @@protoc_insertion_point(message_clear_start:differentialservice.result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_res();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differentialservice.result.res"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differentialservice.result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string res = 1;
  if (this->res().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res().data(), static_cast<int>(this->_internal_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differentialservice.result.res");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differentialservice.result)
  return target;
}

size_t result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differentialservice.result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res = 1;
  if (this->res().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differentialservice.result)
  GOOGLE_DCHECK_NE(&from, this);
  const result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differentialservice.result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differentialservice.result)
    MergeFrom(*source);
  }
}

void result::MergeFrom(const result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differentialservice.result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res().size() > 0) {

    res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_);
  }
}

void result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differentialservice.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void result::CopyFrom(const result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differentialservice.result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool result::IsInitialized() const {
  return true;
}

void result::InternalSwap(result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_.Swap(&other->res_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata result::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace differentialservice
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::differentialservice::MsgRequest* Arena::CreateMaybeMessage< ::differentialservice::MsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::differentialservice::MsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::differentialservice::MsgReply* Arena::CreateMaybeMessage< ::differentialservice::MsgReply >(Arena* arena) {
  return Arena::CreateInternal< ::differentialservice::MsgReply >(arena);
}
template<> PROTOBUF_NOINLINE ::differentialservice::ignoreCriteria* Arena::CreateMaybeMessage< ::differentialservice::ignoreCriteria >(Arena* arena) {
  return Arena::CreateInternal< ::differentialservice::ignoreCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::differentialservice::repeatedFieldTuple* Arena::CreateMaybeMessage< ::differentialservice::repeatedFieldTuple >(Arena* arena) {
  return Arena::CreateInternal< ::differentialservice::repeatedFieldTuple >(arena);
}
template<> PROTOBUF_NOINLINE ::differentialservice::mapvalueTuple* Arena::CreateMaybeMessage< ::differentialservice::mapvalueTuple >(Arena* arena) {
  return Arena::CreateInternal< ::differentialservice::mapvalueTuple >(arena);
}
template<> PROTOBUF_NOINLINE ::differentialservice::float_comparison* Arena::CreateMaybeMessage< ::differentialservice::float_comparison >(Arena* arena) {
  return Arena::CreateInternal< ::differentialservice::float_comparison >(arena);
}
template<> PROTOBUF_NOINLINE ::differentialservice::log* Arena::CreateMaybeMessage< ::differentialservice::log >(Arena* arena) {
  return Arena::CreateInternal< ::differentialservice::log >(arena);
}
template<> PROTOBUF_NOINLINE ::differentialservice::result* Arena::CreateMaybeMessage< ::differentialservice::result >(Arena* arena) {
  return Arena::CreateInternal< ::differentialservice::result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
