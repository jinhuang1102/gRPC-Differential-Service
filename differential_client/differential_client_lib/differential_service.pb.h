// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: differential_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_differential_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_differential_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_differential_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_differential_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_differential_5fservice_2eproto;
namespace differentialservice {
class MsgReply;
class MsgReplyDefaultTypeInternal;
extern MsgReplyDefaultTypeInternal _MsgReply_default_instance_;
class MsgRequest;
class MsgRequestDefaultTypeInternal;
extern MsgRequestDefaultTypeInternal _MsgRequest_default_instance_;
class float_comparison;
class float_comparisonDefaultTypeInternal;
extern float_comparisonDefaultTypeInternal _float_comparison_default_instance_;
class ignoreCriteria;
class ignoreCriteriaDefaultTypeInternal;
extern ignoreCriteriaDefaultTypeInternal _ignoreCriteria_default_instance_;
class log;
class logDefaultTypeInternal;
extern logDefaultTypeInternal _log_default_instance_;
class mapvalueTuple;
class mapvalueTupleDefaultTypeInternal;
extern mapvalueTupleDefaultTypeInternal _mapvalueTuple_default_instance_;
class repeatedFieldTuple;
class repeatedFieldTupleDefaultTypeInternal;
extern repeatedFieldTupleDefaultTypeInternal _repeatedFieldTuple_default_instance_;
class result;
class resultDefaultTypeInternal;
extern resultDefaultTypeInternal _result_default_instance_;
}  // namespace differentialservice
PROTOBUF_NAMESPACE_OPEN
template<> ::differentialservice::MsgReply* Arena::CreateMaybeMessage<::differentialservice::MsgReply>(Arena*);
template<> ::differentialservice::MsgRequest* Arena::CreateMaybeMessage<::differentialservice::MsgRequest>(Arena*);
template<> ::differentialservice::float_comparison* Arena::CreateMaybeMessage<::differentialservice::float_comparison>(Arena*);
template<> ::differentialservice::ignoreCriteria* Arena::CreateMaybeMessage<::differentialservice::ignoreCriteria>(Arena*);
template<> ::differentialservice::log* Arena::CreateMaybeMessage<::differentialservice::log>(Arena*);
template<> ::differentialservice::mapvalueTuple* Arena::CreateMaybeMessage<::differentialservice::mapvalueTuple>(Arena*);
template<> ::differentialservice::repeatedFieldTuple* Arena::CreateMaybeMessage<::differentialservice::repeatedFieldTuple>(Arena*);
template<> ::differentialservice::result* Arena::CreateMaybeMessage<::differentialservice::result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace differentialservice {

enum ignoreCriteria_ignoreFlag : int {
  ignoreCriteria_ignoreFlag_FLAG_IGNORE = 0,
  ignoreCriteria_ignoreFlag_FLAG_COMPARE = 1,
  ignoreCriteria_ignoreFlag_ignoreCriteria_ignoreFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ignoreCriteria_ignoreFlag_ignoreCriteria_ignoreFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ignoreCriteria_ignoreFlag_IsValid(int value);
constexpr ignoreCriteria_ignoreFlag ignoreCriteria_ignoreFlag_ignoreFlag_MIN = ignoreCriteria_ignoreFlag_FLAG_IGNORE;
constexpr ignoreCriteria_ignoreFlag ignoreCriteria_ignoreFlag_ignoreFlag_MAX = ignoreCriteria_ignoreFlag_FLAG_COMPARE;
constexpr int ignoreCriteria_ignoreFlag_ignoreFlag_ARRAYSIZE = ignoreCriteria_ignoreFlag_ignoreFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ignoreCriteria_ignoreFlag_descriptor();
template<typename T>
inline const std::string& ignoreCriteria_ignoreFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ignoreCriteria_ignoreFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ignoreCriteria_ignoreFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ignoreCriteria_ignoreFlag_descriptor(), enum_t_value);
}
inline bool ignoreCriteria_ignoreFlag_Parse(
    const std::string& name, ignoreCriteria_ignoreFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ignoreCriteria_ignoreFlag>(
    ignoreCriteria_ignoreFlag_descriptor(), name, value);
}
enum repeatedFieldTuple_treatAsFlag : int {
  repeatedFieldTuple_treatAsFlag_FLAG_LIST = 0,
  repeatedFieldTuple_treatAsFlag_FLAG_SET = 1,
  repeatedFieldTuple_treatAsFlag_repeatedFieldTuple_treatAsFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  repeatedFieldTuple_treatAsFlag_repeatedFieldTuple_treatAsFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool repeatedFieldTuple_treatAsFlag_IsValid(int value);
constexpr repeatedFieldTuple_treatAsFlag repeatedFieldTuple_treatAsFlag_treatAsFlag_MIN = repeatedFieldTuple_treatAsFlag_FLAG_LIST;
constexpr repeatedFieldTuple_treatAsFlag repeatedFieldTuple_treatAsFlag_treatAsFlag_MAX = repeatedFieldTuple_treatAsFlag_FLAG_SET;
constexpr int repeatedFieldTuple_treatAsFlag_treatAsFlag_ARRAYSIZE = repeatedFieldTuple_treatAsFlag_treatAsFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* repeatedFieldTuple_treatAsFlag_descriptor();
template<typename T>
inline const std::string& repeatedFieldTuple_treatAsFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, repeatedFieldTuple_treatAsFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function repeatedFieldTuple_treatAsFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    repeatedFieldTuple_treatAsFlag_descriptor(), enum_t_value);
}
inline bool repeatedFieldTuple_treatAsFlag_Parse(
    const std::string& name, repeatedFieldTuple_treatAsFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<repeatedFieldTuple_treatAsFlag>(
    repeatedFieldTuple_treatAsFlag_descriptor(), name, value);
}
// ===================================================================

class MsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differentialservice.MsgRequest) */ {
 public:
  MsgRequest();
  virtual ~MsgRequest();

  MsgRequest(const MsgRequest& from);
  MsgRequest(MsgRequest&& from) noexcept
    : MsgRequest() {
    *this = ::std::move(from);
  }

  inline MsgRequest& operator=(const MsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRequest& operator=(MsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgRequest* internal_default_instance() {
    return reinterpret_cast<const MsgRequest*>(
               &_MsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgRequest& a, MsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgRequest* New() const final {
    return CreateMaybeMessage<MsgRequest>(nullptr);
  }

  MsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgRequest& from);
  void MergeFrom(const MsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differentialservice.MsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // string request = 1;
  void clear_request();
  const std::string& request() const;
  void set_request(const std::string& value);
  void set_request(std::string&& value);
  void set_request(const char* value);
  void set_request(const char* value, size_t size);
  std::string* mutable_request();
  std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // @@protoc_insertion_point(class_scope:differentialservice.MsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MsgReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differentialservice.MsgReply) */ {
 public:
  MsgReply();
  virtual ~MsgReply();

  MsgReply(const MsgReply& from);
  MsgReply(MsgReply&& from) noexcept
    : MsgReply() {
    *this = ::std::move(from);
  }

  inline MsgReply& operator=(const MsgReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgReply& operator=(MsgReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgReply* internal_default_instance() {
    return reinterpret_cast<const MsgReply*>(
               &_MsgReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgReply& a, MsgReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgReply* New() const final {
    return CreateMaybeMessage<MsgReply>(nullptr);
  }

  MsgReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgReply& from);
  void MergeFrom(const MsgReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differentialservice.MsgReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
  };
  // string reply = 1;
  void clear_reply();
  const std::string& reply() const;
  void set_reply(const std::string& value);
  void set_reply(std::string&& value);
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  std::string* mutable_reply();
  std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // @@protoc_insertion_point(class_scope:differentialservice.MsgReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ignoreCriteria :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differentialservice.ignoreCriteria) */ {
 public:
  ignoreCriteria();
  virtual ~ignoreCriteria();

  ignoreCriteria(const ignoreCriteria& from);
  ignoreCriteria(ignoreCriteria&& from) noexcept
    : ignoreCriteria() {
    *this = ::std::move(from);
  }

  inline ignoreCriteria& operator=(const ignoreCriteria& from) {
    CopyFrom(from);
    return *this;
  }
  inline ignoreCriteria& operator=(ignoreCriteria&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ignoreCriteria& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ignoreCriteria* internal_default_instance() {
    return reinterpret_cast<const ignoreCriteria*>(
               &_ignoreCriteria_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ignoreCriteria& a, ignoreCriteria& b) {
    a.Swap(&b);
  }
  inline void Swap(ignoreCriteria* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ignoreCriteria* New() const final {
    return CreateMaybeMessage<ignoreCriteria>(nullptr);
  }

  ignoreCriteria* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ignoreCriteria>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ignoreCriteria& from);
  void MergeFrom(const ignoreCriteria& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ignoreCriteria* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differentialservice.ignoreCriteria";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ignoreCriteria_ignoreFlag ignoreFlag;
  static constexpr ignoreFlag FLAG_IGNORE =
    ignoreCriteria_ignoreFlag_FLAG_IGNORE;
  static constexpr ignoreFlag FLAG_COMPARE =
    ignoreCriteria_ignoreFlag_FLAG_COMPARE;
  static inline bool ignoreFlag_IsValid(int value) {
    return ignoreCriteria_ignoreFlag_IsValid(value);
  }
  static constexpr ignoreFlag ignoreFlag_MIN =
    ignoreCriteria_ignoreFlag_ignoreFlag_MIN;
  static constexpr ignoreFlag ignoreFlag_MAX =
    ignoreCriteria_ignoreFlag_ignoreFlag_MAX;
  static constexpr int ignoreFlag_ARRAYSIZE =
    ignoreCriteria_ignoreFlag_ignoreFlag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ignoreFlag_descriptor() {
    return ignoreCriteria_ignoreFlag_descriptor();
  }
  template<typename T>
  static inline const std::string& ignoreFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ignoreFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ignoreFlag_Name.");
    return ignoreCriteria_ignoreFlag_Name(enum_t_value);
  }
  static inline bool ignoreFlag_Parse(const std::string& name,
      ignoreFlag* value) {
    return ignoreCriteria_ignoreFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreFieldsListFieldNumber = 2,
    kRegexFieldNumber = 3,
    kFlagFieldNumber = 1,
  };
  // repeated string ignore_fields_list = 2;
  int ignore_fields_list_size() const;
  private:
  int _internal_ignore_fields_list_size() const;
  public:
  void clear_ignore_fields_list();
  const std::string& ignore_fields_list(int index) const;
  std::string* mutable_ignore_fields_list(int index);
  void set_ignore_fields_list(int index, const std::string& value);
  void set_ignore_fields_list(int index, std::string&& value);
  void set_ignore_fields_list(int index, const char* value);
  void set_ignore_fields_list(int index, const char* value, size_t size);
  std::string* add_ignore_fields_list();
  void add_ignore_fields_list(const std::string& value);
  void add_ignore_fields_list(std::string&& value);
  void add_ignore_fields_list(const char* value);
  void add_ignore_fields_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ignore_fields_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ignore_fields_list();
  private:
  const std::string& _internal_ignore_fields_list(int index) const;
  std::string* _internal_add_ignore_fields_list();
  public:

  // string regex = 3;
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  private:
  const std::string& _internal_regex() const;
  void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // .differentialservice.ignoreCriteria.ignoreFlag flag = 1;
  void clear_flag();
  ::differentialservice::ignoreCriteria_ignoreFlag flag() const;
  void set_flag(::differentialservice::ignoreCriteria_ignoreFlag value);
  private:
  ::differentialservice::ignoreCriteria_ignoreFlag _internal_flag() const;
  void _internal_set_flag(::differentialservice::ignoreCriteria_ignoreFlag value);
  public:

  // @@protoc_insertion_point(class_scope:differentialservice.ignoreCriteria)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ignore_fields_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  int flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class repeatedFieldTuple :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differentialservice.repeatedFieldTuple) */ {
 public:
  repeatedFieldTuple();
  virtual ~repeatedFieldTuple();

  repeatedFieldTuple(const repeatedFieldTuple& from);
  repeatedFieldTuple(repeatedFieldTuple&& from) noexcept
    : repeatedFieldTuple() {
    *this = ::std::move(from);
  }

  inline repeatedFieldTuple& operator=(const repeatedFieldTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline repeatedFieldTuple& operator=(repeatedFieldTuple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const repeatedFieldTuple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const repeatedFieldTuple* internal_default_instance() {
    return reinterpret_cast<const repeatedFieldTuple*>(
               &_repeatedFieldTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(repeatedFieldTuple& a, repeatedFieldTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(repeatedFieldTuple* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline repeatedFieldTuple* New() const final {
    return CreateMaybeMessage<repeatedFieldTuple>(nullptr);
  }

  repeatedFieldTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<repeatedFieldTuple>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const repeatedFieldTuple& from);
  void MergeFrom(const repeatedFieldTuple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(repeatedFieldTuple* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differentialservice.repeatedFieldTuple";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef repeatedFieldTuple_treatAsFlag treatAsFlag;
  static constexpr treatAsFlag FLAG_LIST =
    repeatedFieldTuple_treatAsFlag_FLAG_LIST;
  static constexpr treatAsFlag FLAG_SET =
    repeatedFieldTuple_treatAsFlag_FLAG_SET;
  static inline bool treatAsFlag_IsValid(int value) {
    return repeatedFieldTuple_treatAsFlag_IsValid(value);
  }
  static constexpr treatAsFlag treatAsFlag_MIN =
    repeatedFieldTuple_treatAsFlag_treatAsFlag_MIN;
  static constexpr treatAsFlag treatAsFlag_MAX =
    repeatedFieldTuple_treatAsFlag_treatAsFlag_MAX;
  static constexpr int treatAsFlag_ARRAYSIZE =
    repeatedFieldTuple_treatAsFlag_treatAsFlag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  treatAsFlag_descriptor() {
    return repeatedFieldTuple_treatAsFlag_descriptor();
  }
  template<typename T>
  static inline const std::string& treatAsFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, treatAsFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function treatAsFlag_Name.");
    return repeatedFieldTuple_treatAsFlag_Name(enum_t_value);
  }
  static inline bool treatAsFlag_Parse(const std::string& name,
      treatAsFlag* value) {
    return repeatedFieldTuple_treatAsFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 2,
    kFlagFieldNumber = 1,
  };
  // string field_name = 2;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // .differentialservice.repeatedFieldTuple.treatAsFlag flag = 1;
  void clear_flag();
  ::differentialservice::repeatedFieldTuple_treatAsFlag flag() const;
  void set_flag(::differentialservice::repeatedFieldTuple_treatAsFlag value);
  private:
  ::differentialservice::repeatedFieldTuple_treatAsFlag _internal_flag() const;
  void _internal_set_flag(::differentialservice::repeatedFieldTuple_treatAsFlag value);
  public:

  // @@protoc_insertion_point(class_scope:differentialservice.repeatedFieldTuple)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  int flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class mapvalueTuple :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differentialservice.mapvalueTuple) */ {
 public:
  mapvalueTuple();
  virtual ~mapvalueTuple();

  mapvalueTuple(const mapvalueTuple& from);
  mapvalueTuple(mapvalueTuple&& from) noexcept
    : mapvalueTuple() {
    *this = ::std::move(from);
  }

  inline mapvalueTuple& operator=(const mapvalueTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline mapvalueTuple& operator=(mapvalueTuple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mapvalueTuple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mapvalueTuple* internal_default_instance() {
    return reinterpret_cast<const mapvalueTuple*>(
               &_mapvalueTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(mapvalueTuple& a, mapvalueTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(mapvalueTuple* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mapvalueTuple* New() const final {
    return CreateMaybeMessage<mapvalueTuple>(nullptr);
  }

  mapvalueTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mapvalueTuple>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mapvalueTuple& from);
  void MergeFrom(const mapvalueTuple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mapvalueTuple* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differentialservice.mapvalueTuple";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameOfSubFieldFieldNumber = 2,
    kNameOfRepeatedFieldFieldNumber = 1,
  };
  // repeated string name_of_sub_field = 2;
  int name_of_sub_field_size() const;
  private:
  int _internal_name_of_sub_field_size() const;
  public:
  void clear_name_of_sub_field();
  const std::string& name_of_sub_field(int index) const;
  std::string* mutable_name_of_sub_field(int index);
  void set_name_of_sub_field(int index, const std::string& value);
  void set_name_of_sub_field(int index, std::string&& value);
  void set_name_of_sub_field(int index, const char* value);
  void set_name_of_sub_field(int index, const char* value, size_t size);
  std::string* add_name_of_sub_field();
  void add_name_of_sub_field(const std::string& value);
  void add_name_of_sub_field(std::string&& value);
  void add_name_of_sub_field(const char* value);
  void add_name_of_sub_field(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_of_sub_field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_of_sub_field();
  private:
  const std::string& _internal_name_of_sub_field(int index) const;
  std::string* _internal_add_name_of_sub_field();
  public:

  // string name_of_repeated_field = 1;
  void clear_name_of_repeated_field();
  const std::string& name_of_repeated_field() const;
  void set_name_of_repeated_field(const std::string& value);
  void set_name_of_repeated_field(std::string&& value);
  void set_name_of_repeated_field(const char* value);
  void set_name_of_repeated_field(const char* value, size_t size);
  std::string* mutable_name_of_repeated_field();
  std::string* release_name_of_repeated_field();
  void set_allocated_name_of_repeated_field(std::string* name_of_repeated_field);
  private:
  const std::string& _internal_name_of_repeated_field() const;
  void _internal_set_name_of_repeated_field(const std::string& value);
  std::string* _internal_mutable_name_of_repeated_field();
  public:

  // @@protoc_insertion_point(class_scope:differentialservice.mapvalueTuple)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_of_sub_field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_of_repeated_field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class float_comparison :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differentialservice.float_comparison) */ {
 public:
  float_comparison();
  virtual ~float_comparison();

  float_comparison(const float_comparison& from);
  float_comparison(float_comparison&& from) noexcept
    : float_comparison() {
    *this = ::std::move(from);
  }

  inline float_comparison& operator=(const float_comparison& from) {
    CopyFrom(from);
    return *this;
  }
  inline float_comparison& operator=(float_comparison&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const float_comparison& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const float_comparison* internal_default_instance() {
    return reinterpret_cast<const float_comparison*>(
               &_float_comparison_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(float_comparison& a, float_comparison& b) {
    a.Swap(&b);
  }
  inline void Swap(float_comparison* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline float_comparison* New() const final {
    return CreateMaybeMessage<float_comparison>(nullptr);
  }

  float_comparison* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<float_comparison>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const float_comparison& from);
  void MergeFrom(const float_comparison& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(float_comparison* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differentialservice.float_comparison";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFractionFieldNumber = 1,
    kMarginFieldNumber = 2,
  };
  // float fraction = 1;
  void clear_fraction();
  float fraction() const;
  void set_fraction(float value);
  private:
  float _internal_fraction() const;
  void _internal_set_fraction(float value);
  public:

  // float margin = 2;
  void clear_margin();
  float margin() const;
  void set_margin(float value);
  private:
  float _internal_margin() const;
  void _internal_set_margin(float value);
  public:

  // @@protoc_insertion_point(class_scope:differentialservice.float_comparison)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float fraction_;
  float margin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class log :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differentialservice.log) */ {
 public:
  log();
  virtual ~log();

  log(const log& from);
  log(log&& from) noexcept
    : log() {
    *this = ::std::move(from);
  }

  inline log& operator=(const log& from) {
    CopyFrom(from);
    return *this;
  }
  inline log& operator=(log&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const log* internal_default_instance() {
    return reinterpret_cast<const log*>(
               &_log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(log& a, log& b) {
    a.Swap(&b);
  }
  inline void Swap(log* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline log* New() const final {
    return CreateMaybeMessage<log>(nullptr);
  }

  log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<log>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const log& from);
  void MergeFrom(const log& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(log* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differentialservice.log";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileDescriptorProtoFieldNumber = 4,
    kRepeatedFieldFieldNumber = 6,
    kMapvaluecompareFieldNumber = 7,
    kMessage1FieldNumber = 1,
    kMessage2FieldNumber = 2,
    kNameOfMessageDescriptorFieldNumber = 3,
    kUserIgnoreFieldNumber = 5,
    kFractionMarginFieldNumber = 8,
  };
  // repeated bytes file_descriptor_proto = 4;
  int file_descriptor_proto_size() const;
  private:
  int _internal_file_descriptor_proto_size() const;
  public:
  void clear_file_descriptor_proto();
  const std::string& file_descriptor_proto(int index) const;
  std::string* mutable_file_descriptor_proto(int index);
  void set_file_descriptor_proto(int index, const std::string& value);
  void set_file_descriptor_proto(int index, std::string&& value);
  void set_file_descriptor_proto(int index, const char* value);
  void set_file_descriptor_proto(int index, const void* value, size_t size);
  std::string* add_file_descriptor_proto();
  void add_file_descriptor_proto(const std::string& value);
  void add_file_descriptor_proto(std::string&& value);
  void add_file_descriptor_proto(const char* value);
  void add_file_descriptor_proto(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_descriptor_proto() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_descriptor_proto();
  private:
  const std::string& _internal_file_descriptor_proto(int index) const;
  std::string* _internal_add_file_descriptor_proto();
  public:

  // repeated .differentialservice.repeatedFieldTuple repeated_field = 6;
  int repeated_field_size() const;
  private:
  int _internal_repeated_field_size() const;
  public:
  void clear_repeated_field();
  ::differentialservice::repeatedFieldTuple* mutable_repeated_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differentialservice::repeatedFieldTuple >*
      mutable_repeated_field();
  private:
  const ::differentialservice::repeatedFieldTuple& _internal_repeated_field(int index) const;
  ::differentialservice::repeatedFieldTuple* _internal_add_repeated_field();
  public:
  const ::differentialservice::repeatedFieldTuple& repeated_field(int index) const;
  ::differentialservice::repeatedFieldTuple* add_repeated_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differentialservice::repeatedFieldTuple >&
      repeated_field() const;

  // repeated .differentialservice.mapvalueTuple mapvaluecompare = 7;
  int mapvaluecompare_size() const;
  private:
  int _internal_mapvaluecompare_size() const;
  public:
  void clear_mapvaluecompare();
  ::differentialservice::mapvalueTuple* mutable_mapvaluecompare(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differentialservice::mapvalueTuple >*
      mutable_mapvaluecompare();
  private:
  const ::differentialservice::mapvalueTuple& _internal_mapvaluecompare(int index) const;
  ::differentialservice::mapvalueTuple* _internal_add_mapvaluecompare();
  public:
  const ::differentialservice::mapvalueTuple& mapvaluecompare(int index) const;
  ::differentialservice::mapvalueTuple* add_mapvaluecompare();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differentialservice::mapvalueTuple >&
      mapvaluecompare() const;

  // bytes message_1 = 1;
  void clear_message_1();
  const std::string& message_1() const;
  void set_message_1(const std::string& value);
  void set_message_1(std::string&& value);
  void set_message_1(const char* value);
  void set_message_1(const void* value, size_t size);
  std::string* mutable_message_1();
  std::string* release_message_1();
  void set_allocated_message_1(std::string* message_1);
  private:
  const std::string& _internal_message_1() const;
  void _internal_set_message_1(const std::string& value);
  std::string* _internal_mutable_message_1();
  public:

  // bytes message_2 = 2;
  void clear_message_2();
  const std::string& message_2() const;
  void set_message_2(const std::string& value);
  void set_message_2(std::string&& value);
  void set_message_2(const char* value);
  void set_message_2(const void* value, size_t size);
  std::string* mutable_message_2();
  std::string* release_message_2();
  void set_allocated_message_2(std::string* message_2);
  private:
  const std::string& _internal_message_2() const;
  void _internal_set_message_2(const std::string& value);
  std::string* _internal_mutable_message_2();
  public:

  // string name_of_message_descriptor = 3;
  void clear_name_of_message_descriptor();
  const std::string& name_of_message_descriptor() const;
  void set_name_of_message_descriptor(const std::string& value);
  void set_name_of_message_descriptor(std::string&& value);
  void set_name_of_message_descriptor(const char* value);
  void set_name_of_message_descriptor(const char* value, size_t size);
  std::string* mutable_name_of_message_descriptor();
  std::string* release_name_of_message_descriptor();
  void set_allocated_name_of_message_descriptor(std::string* name_of_message_descriptor);
  private:
  const std::string& _internal_name_of_message_descriptor() const;
  void _internal_set_name_of_message_descriptor(const std::string& value);
  std::string* _internal_mutable_name_of_message_descriptor();
  public:

  // .differentialservice.ignoreCriteria user_ignore = 5;
  bool has_user_ignore() const;
  private:
  bool _internal_has_user_ignore() const;
  public:
  void clear_user_ignore();
  const ::differentialservice::ignoreCriteria& user_ignore() const;
  ::differentialservice::ignoreCriteria* release_user_ignore();
  ::differentialservice::ignoreCriteria* mutable_user_ignore();
  void set_allocated_user_ignore(::differentialservice::ignoreCriteria* user_ignore);
  private:
  const ::differentialservice::ignoreCriteria& _internal_user_ignore() const;
  ::differentialservice::ignoreCriteria* _internal_mutable_user_ignore();
  public:

  // .differentialservice.float_comparison fraction_margin = 8;
  bool has_fraction_margin() const;
  private:
  bool _internal_has_fraction_margin() const;
  public:
  void clear_fraction_margin();
  const ::differentialservice::float_comparison& fraction_margin() const;
  ::differentialservice::float_comparison* release_fraction_margin();
  ::differentialservice::float_comparison* mutable_fraction_margin();
  void set_allocated_fraction_margin(::differentialservice::float_comparison* fraction_margin);
  private:
  const ::differentialservice::float_comparison& _internal_fraction_margin() const;
  ::differentialservice::float_comparison* _internal_mutable_fraction_margin();
  public:

  // @@protoc_insertion_point(class_scope:differentialservice.log)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_descriptor_proto_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differentialservice::repeatedFieldTuple > repeated_field_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differentialservice::mapvalueTuple > mapvaluecompare_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_of_message_descriptor_;
  ::differentialservice::ignoreCriteria* user_ignore_;
  ::differentialservice::float_comparison* fraction_margin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class result :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differentialservice.result) */ {
 public:
  result();
  virtual ~result();

  result(const result& from);
  result(result&& from) noexcept
    : result() {
    *this = ::std::move(from);
  }

  inline result& operator=(const result& from) {
    CopyFrom(from);
    return *this;
  }
  inline result& operator=(result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const result* internal_default_instance() {
    return reinterpret_cast<const result*>(
               &_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(result& a, result& b) {
    a.Swap(&b);
  }
  inline void Swap(result* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline result* New() const final {
    return CreateMaybeMessage<result>(nullptr);
  }

  result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const result& from);
  void MergeFrom(const result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differentialservice.result";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // string res = 1;
  void clear_res();
  const std::string& res() const;
  void set_res(const std::string& value);
  void set_res(std::string&& value);
  void set_res(const char* value);
  void set_res(const char* value, size_t size);
  std::string* mutable_res();
  std::string* release_res();
  void set_allocated_res(std::string* res);
  private:
  const std::string& _internal_res() const;
  void _internal_set_res(const std::string& value);
  std::string* _internal_mutable_res();
  public:

  // @@protoc_insertion_point(class_scope:differentialservice.result)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgRequest

// string request = 1;
inline void MsgRequest::clear_request() {
  request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgRequest::request() const {
  // @@protoc_insertion_point(field_get:differentialservice.MsgRequest.request)
  return _internal_request();
}
inline void MsgRequest::set_request(const std::string& value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:differentialservice.MsgRequest.request)
}
inline std::string* MsgRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable:differentialservice.MsgRequest.request)
  return _internal_mutable_request();
}
inline const std::string& MsgRequest::_internal_request() const {
  return request_.GetNoArena();
}
inline void MsgRequest::_internal_set_request(const std::string& value) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgRequest::set_request(std::string&& value) {
  
  request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differentialservice.MsgRequest.request)
}
inline void MsgRequest::set_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differentialservice.MsgRequest.request)
}
inline void MsgRequest::set_request(const char* value, size_t size) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differentialservice.MsgRequest.request)
}
inline std::string* MsgRequest::_internal_mutable_request() {
  
  return request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgRequest::release_request() {
  // @@protoc_insertion_point(field_release:differentialservice.MsgRequest.request)
  
  return request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgRequest::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:differentialservice.MsgRequest.request)
}

// -------------------------------------------------------------------

// MsgReply

// string reply = 1;
inline void MsgReply::clear_reply() {
  reply_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgReply::reply() const {
  // @@protoc_insertion_point(field_get:differentialservice.MsgReply.reply)
  return _internal_reply();
}
inline void MsgReply::set_reply(const std::string& value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:differentialservice.MsgReply.reply)
}
inline std::string* MsgReply::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:differentialservice.MsgReply.reply)
  return _internal_mutable_reply();
}
inline const std::string& MsgReply::_internal_reply() const {
  return reply_.GetNoArena();
}
inline void MsgReply::_internal_set_reply(const std::string& value) {
  
  reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgReply::set_reply(std::string&& value) {
  
  reply_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differentialservice.MsgReply.reply)
}
inline void MsgReply::set_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differentialservice.MsgReply.reply)
}
inline void MsgReply::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differentialservice.MsgReply.reply)
}
inline std::string* MsgReply::_internal_mutable_reply() {
  
  return reply_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgReply::release_reply() {
  // @@protoc_insertion_point(field_release:differentialservice.MsgReply.reply)
  
  return reply_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgReply::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:differentialservice.MsgReply.reply)
}

// -------------------------------------------------------------------

// ignoreCriteria

// .differentialservice.ignoreCriteria.ignoreFlag flag = 1;
inline void ignoreCriteria::clear_flag() {
  flag_ = 0;
}
inline ::differentialservice::ignoreCriteria_ignoreFlag ignoreCriteria::_internal_flag() const {
  return static_cast< ::differentialservice::ignoreCriteria_ignoreFlag >(flag_);
}
inline ::differentialservice::ignoreCriteria_ignoreFlag ignoreCriteria::flag() const {
  // @@protoc_insertion_point(field_get:differentialservice.ignoreCriteria.flag)
  return _internal_flag();
}
inline void ignoreCriteria::_internal_set_flag(::differentialservice::ignoreCriteria_ignoreFlag value) {
  
  flag_ = value;
}
inline void ignoreCriteria::set_flag(::differentialservice::ignoreCriteria_ignoreFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:differentialservice.ignoreCriteria.flag)
}

// repeated string ignore_fields_list = 2;
inline int ignoreCriteria::_internal_ignore_fields_list_size() const {
  return ignore_fields_list_.size();
}
inline int ignoreCriteria::ignore_fields_list_size() const {
  return _internal_ignore_fields_list_size();
}
inline void ignoreCriteria::clear_ignore_fields_list() {
  ignore_fields_list_.Clear();
}
inline std::string* ignoreCriteria::add_ignore_fields_list() {
  // @@protoc_insertion_point(field_add_mutable:differentialservice.ignoreCriteria.ignore_fields_list)
  return _internal_add_ignore_fields_list();
}
inline const std::string& ignoreCriteria::_internal_ignore_fields_list(int index) const {
  return ignore_fields_list_.Get(index);
}
inline const std::string& ignoreCriteria::ignore_fields_list(int index) const {
  // @@protoc_insertion_point(field_get:differentialservice.ignoreCriteria.ignore_fields_list)
  return _internal_ignore_fields_list(index);
}
inline std::string* ignoreCriteria::mutable_ignore_fields_list(int index) {
  // @@protoc_insertion_point(field_mutable:differentialservice.ignoreCriteria.ignore_fields_list)
  return ignore_fields_list_.Mutable(index);
}
inline void ignoreCriteria::set_ignore_fields_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:differentialservice.ignoreCriteria.ignore_fields_list)
  ignore_fields_list_.Mutable(index)->assign(value);
}
inline void ignoreCriteria::set_ignore_fields_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:differentialservice.ignoreCriteria.ignore_fields_list)
  ignore_fields_list_.Mutable(index)->assign(std::move(value));
}
inline void ignoreCriteria::set_ignore_fields_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignore_fields_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:differentialservice.ignoreCriteria.ignore_fields_list)
}
inline void ignoreCriteria::set_ignore_fields_list(int index, const char* value, size_t size) {
  ignore_fields_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:differentialservice.ignoreCriteria.ignore_fields_list)
}
inline std::string* ignoreCriteria::_internal_add_ignore_fields_list() {
  return ignore_fields_list_.Add();
}
inline void ignoreCriteria::add_ignore_fields_list(const std::string& value) {
  ignore_fields_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:differentialservice.ignoreCriteria.ignore_fields_list)
}
inline void ignoreCriteria::add_ignore_fields_list(std::string&& value) {
  ignore_fields_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:differentialservice.ignoreCriteria.ignore_fields_list)
}
inline void ignoreCriteria::add_ignore_fields_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignore_fields_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:differentialservice.ignoreCriteria.ignore_fields_list)
}
inline void ignoreCriteria::add_ignore_fields_list(const char* value, size_t size) {
  ignore_fields_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:differentialservice.ignoreCriteria.ignore_fields_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ignoreCriteria::ignore_fields_list() const {
  // @@protoc_insertion_point(field_list:differentialservice.ignoreCriteria.ignore_fields_list)
  return ignore_fields_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ignoreCriteria::mutable_ignore_fields_list() {
  // @@protoc_insertion_point(field_mutable_list:differentialservice.ignoreCriteria.ignore_fields_list)
  return &ignore_fields_list_;
}

// string regex = 3;
inline void ignoreCriteria::clear_regex() {
  regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ignoreCriteria::regex() const {
  // @@protoc_insertion_point(field_get:differentialservice.ignoreCriteria.regex)
  return _internal_regex();
}
inline void ignoreCriteria::set_regex(const std::string& value) {
  _internal_set_regex(value);
  // @@protoc_insertion_point(field_set:differentialservice.ignoreCriteria.regex)
}
inline std::string* ignoreCriteria::mutable_regex() {
  // @@protoc_insertion_point(field_mutable:differentialservice.ignoreCriteria.regex)
  return _internal_mutable_regex();
}
inline const std::string& ignoreCriteria::_internal_regex() const {
  return regex_.GetNoArena();
}
inline void ignoreCriteria::_internal_set_regex(const std::string& value) {
  
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ignoreCriteria::set_regex(std::string&& value) {
  
  regex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differentialservice.ignoreCriteria.regex)
}
inline void ignoreCriteria::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differentialservice.ignoreCriteria.regex)
}
inline void ignoreCriteria::set_regex(const char* value, size_t size) {
  
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differentialservice.ignoreCriteria.regex)
}
inline std::string* ignoreCriteria::_internal_mutable_regex() {
  
  return regex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ignoreCriteria::release_regex() {
  // @@protoc_insertion_point(field_release:differentialservice.ignoreCriteria.regex)
  
  return regex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ignoreCriteria::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex);
  // @@protoc_insertion_point(field_set_allocated:differentialservice.ignoreCriteria.regex)
}

// -------------------------------------------------------------------

// repeatedFieldTuple

// .differentialservice.repeatedFieldTuple.treatAsFlag flag = 1;
inline void repeatedFieldTuple::clear_flag() {
  flag_ = 0;
}
inline ::differentialservice::repeatedFieldTuple_treatAsFlag repeatedFieldTuple::_internal_flag() const {
  return static_cast< ::differentialservice::repeatedFieldTuple_treatAsFlag >(flag_);
}
inline ::differentialservice::repeatedFieldTuple_treatAsFlag repeatedFieldTuple::flag() const {
  // @@protoc_insertion_point(field_get:differentialservice.repeatedFieldTuple.flag)
  return _internal_flag();
}
inline void repeatedFieldTuple::_internal_set_flag(::differentialservice::repeatedFieldTuple_treatAsFlag value) {
  
  flag_ = value;
}
inline void repeatedFieldTuple::set_flag(::differentialservice::repeatedFieldTuple_treatAsFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:differentialservice.repeatedFieldTuple.flag)
}

// string field_name = 2;
inline void repeatedFieldTuple::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& repeatedFieldTuple::field_name() const {
  // @@protoc_insertion_point(field_get:differentialservice.repeatedFieldTuple.field_name)
  return _internal_field_name();
}
inline void repeatedFieldTuple::set_field_name(const std::string& value) {
  _internal_set_field_name(value);
  // @@protoc_insertion_point(field_set:differentialservice.repeatedFieldTuple.field_name)
}
inline std::string* repeatedFieldTuple::mutable_field_name() {
  // @@protoc_insertion_point(field_mutable:differentialservice.repeatedFieldTuple.field_name)
  return _internal_mutable_field_name();
}
inline const std::string& repeatedFieldTuple::_internal_field_name() const {
  return field_name_.GetNoArena();
}
inline void repeatedFieldTuple::_internal_set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void repeatedFieldTuple::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differentialservice.repeatedFieldTuple.field_name)
}
inline void repeatedFieldTuple::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differentialservice.repeatedFieldTuple.field_name)
}
inline void repeatedFieldTuple::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differentialservice.repeatedFieldTuple.field_name)
}
inline std::string* repeatedFieldTuple::_internal_mutable_field_name() {
  
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* repeatedFieldTuple::release_field_name() {
  // @@protoc_insertion_point(field_release:differentialservice.repeatedFieldTuple.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void repeatedFieldTuple::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:differentialservice.repeatedFieldTuple.field_name)
}

// -------------------------------------------------------------------

// mapvalueTuple

// string name_of_repeated_field = 1;
inline void mapvalueTuple::clear_name_of_repeated_field() {
  name_of_repeated_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& mapvalueTuple::name_of_repeated_field() const {
  // @@protoc_insertion_point(field_get:differentialservice.mapvalueTuple.name_of_repeated_field)
  return _internal_name_of_repeated_field();
}
inline void mapvalueTuple::set_name_of_repeated_field(const std::string& value) {
  _internal_set_name_of_repeated_field(value);
  // @@protoc_insertion_point(field_set:differentialservice.mapvalueTuple.name_of_repeated_field)
}
inline std::string* mapvalueTuple::mutable_name_of_repeated_field() {
  // @@protoc_insertion_point(field_mutable:differentialservice.mapvalueTuple.name_of_repeated_field)
  return _internal_mutable_name_of_repeated_field();
}
inline const std::string& mapvalueTuple::_internal_name_of_repeated_field() const {
  return name_of_repeated_field_.GetNoArena();
}
inline void mapvalueTuple::_internal_set_name_of_repeated_field(const std::string& value) {
  
  name_of_repeated_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void mapvalueTuple::set_name_of_repeated_field(std::string&& value) {
  
  name_of_repeated_field_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differentialservice.mapvalueTuple.name_of_repeated_field)
}
inline void mapvalueTuple::set_name_of_repeated_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_of_repeated_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differentialservice.mapvalueTuple.name_of_repeated_field)
}
inline void mapvalueTuple::set_name_of_repeated_field(const char* value, size_t size) {
  
  name_of_repeated_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differentialservice.mapvalueTuple.name_of_repeated_field)
}
inline std::string* mapvalueTuple::_internal_mutable_name_of_repeated_field() {
  
  return name_of_repeated_field_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* mapvalueTuple::release_name_of_repeated_field() {
  // @@protoc_insertion_point(field_release:differentialservice.mapvalueTuple.name_of_repeated_field)
  
  return name_of_repeated_field_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void mapvalueTuple::set_allocated_name_of_repeated_field(std::string* name_of_repeated_field) {
  if (name_of_repeated_field != nullptr) {
    
  } else {
    
  }
  name_of_repeated_field_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_of_repeated_field);
  // @@protoc_insertion_point(field_set_allocated:differentialservice.mapvalueTuple.name_of_repeated_field)
}

// repeated string name_of_sub_field = 2;
inline int mapvalueTuple::_internal_name_of_sub_field_size() const {
  return name_of_sub_field_.size();
}
inline int mapvalueTuple::name_of_sub_field_size() const {
  return _internal_name_of_sub_field_size();
}
inline void mapvalueTuple::clear_name_of_sub_field() {
  name_of_sub_field_.Clear();
}
inline std::string* mapvalueTuple::add_name_of_sub_field() {
  // @@protoc_insertion_point(field_add_mutable:differentialservice.mapvalueTuple.name_of_sub_field)
  return _internal_add_name_of_sub_field();
}
inline const std::string& mapvalueTuple::_internal_name_of_sub_field(int index) const {
  return name_of_sub_field_.Get(index);
}
inline const std::string& mapvalueTuple::name_of_sub_field(int index) const {
  // @@protoc_insertion_point(field_get:differentialservice.mapvalueTuple.name_of_sub_field)
  return _internal_name_of_sub_field(index);
}
inline std::string* mapvalueTuple::mutable_name_of_sub_field(int index) {
  // @@protoc_insertion_point(field_mutable:differentialservice.mapvalueTuple.name_of_sub_field)
  return name_of_sub_field_.Mutable(index);
}
inline void mapvalueTuple::set_name_of_sub_field(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:differentialservice.mapvalueTuple.name_of_sub_field)
  name_of_sub_field_.Mutable(index)->assign(value);
}
inline void mapvalueTuple::set_name_of_sub_field(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:differentialservice.mapvalueTuple.name_of_sub_field)
  name_of_sub_field_.Mutable(index)->assign(std::move(value));
}
inline void mapvalueTuple::set_name_of_sub_field(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_of_sub_field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:differentialservice.mapvalueTuple.name_of_sub_field)
}
inline void mapvalueTuple::set_name_of_sub_field(int index, const char* value, size_t size) {
  name_of_sub_field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:differentialservice.mapvalueTuple.name_of_sub_field)
}
inline std::string* mapvalueTuple::_internal_add_name_of_sub_field() {
  return name_of_sub_field_.Add();
}
inline void mapvalueTuple::add_name_of_sub_field(const std::string& value) {
  name_of_sub_field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:differentialservice.mapvalueTuple.name_of_sub_field)
}
inline void mapvalueTuple::add_name_of_sub_field(std::string&& value) {
  name_of_sub_field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:differentialservice.mapvalueTuple.name_of_sub_field)
}
inline void mapvalueTuple::add_name_of_sub_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_of_sub_field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:differentialservice.mapvalueTuple.name_of_sub_field)
}
inline void mapvalueTuple::add_name_of_sub_field(const char* value, size_t size) {
  name_of_sub_field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:differentialservice.mapvalueTuple.name_of_sub_field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
mapvalueTuple::name_of_sub_field() const {
  // @@protoc_insertion_point(field_list:differentialservice.mapvalueTuple.name_of_sub_field)
  return name_of_sub_field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
mapvalueTuple::mutable_name_of_sub_field() {
  // @@protoc_insertion_point(field_mutable_list:differentialservice.mapvalueTuple.name_of_sub_field)
  return &name_of_sub_field_;
}

// -------------------------------------------------------------------

// float_comparison

// float fraction = 1;
inline void float_comparison::clear_fraction() {
  fraction_ = 0;
}
inline float float_comparison::_internal_fraction() const {
  return fraction_;
}
inline float float_comparison::fraction() const {
  // @@protoc_insertion_point(field_get:differentialservice.float_comparison.fraction)
  return _internal_fraction();
}
inline void float_comparison::_internal_set_fraction(float value) {
  
  fraction_ = value;
}
inline void float_comparison::set_fraction(float value) {
  _internal_set_fraction(value);
  // @@protoc_insertion_point(field_set:differentialservice.float_comparison.fraction)
}

// float margin = 2;
inline void float_comparison::clear_margin() {
  margin_ = 0;
}
inline float float_comparison::_internal_margin() const {
  return margin_;
}
inline float float_comparison::margin() const {
  // @@protoc_insertion_point(field_get:differentialservice.float_comparison.margin)
  return _internal_margin();
}
inline void float_comparison::_internal_set_margin(float value) {
  
  margin_ = value;
}
inline void float_comparison::set_margin(float value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:differentialservice.float_comparison.margin)
}

// -------------------------------------------------------------------

// log

// bytes message_1 = 1;
inline void log::clear_message_1() {
  message_1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& log::message_1() const {
  // @@protoc_insertion_point(field_get:differentialservice.log.message_1)
  return _internal_message_1();
}
inline void log::set_message_1(const std::string& value) {
  _internal_set_message_1(value);
  // @@protoc_insertion_point(field_set:differentialservice.log.message_1)
}
inline std::string* log::mutable_message_1() {
  // @@protoc_insertion_point(field_mutable:differentialservice.log.message_1)
  return _internal_mutable_message_1();
}
inline const std::string& log::_internal_message_1() const {
  return message_1_.GetNoArena();
}
inline void log::_internal_set_message_1(const std::string& value) {
  
  message_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void log::set_message_1(std::string&& value) {
  
  message_1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differentialservice.log.message_1)
}
inline void log::set_message_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differentialservice.log.message_1)
}
inline void log::set_message_1(const void* value, size_t size) {
  
  message_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differentialservice.log.message_1)
}
inline std::string* log::_internal_mutable_message_1() {
  
  return message_1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* log::release_message_1() {
  // @@protoc_insertion_point(field_release:differentialservice.log.message_1)
  
  return message_1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void log::set_allocated_message_1(std::string* message_1) {
  if (message_1 != nullptr) {
    
  } else {
    
  }
  message_1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_1);
  // @@protoc_insertion_point(field_set_allocated:differentialservice.log.message_1)
}

// bytes message_2 = 2;
inline void log::clear_message_2() {
  message_2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& log::message_2() const {
  // @@protoc_insertion_point(field_get:differentialservice.log.message_2)
  return _internal_message_2();
}
inline void log::set_message_2(const std::string& value) {
  _internal_set_message_2(value);
  // @@protoc_insertion_point(field_set:differentialservice.log.message_2)
}
inline std::string* log::mutable_message_2() {
  // @@protoc_insertion_point(field_mutable:differentialservice.log.message_2)
  return _internal_mutable_message_2();
}
inline const std::string& log::_internal_message_2() const {
  return message_2_.GetNoArena();
}
inline void log::_internal_set_message_2(const std::string& value) {
  
  message_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void log::set_message_2(std::string&& value) {
  
  message_2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differentialservice.log.message_2)
}
inline void log::set_message_2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differentialservice.log.message_2)
}
inline void log::set_message_2(const void* value, size_t size) {
  
  message_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differentialservice.log.message_2)
}
inline std::string* log::_internal_mutable_message_2() {
  
  return message_2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* log::release_message_2() {
  // @@protoc_insertion_point(field_release:differentialservice.log.message_2)
  
  return message_2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void log::set_allocated_message_2(std::string* message_2) {
  if (message_2 != nullptr) {
    
  } else {
    
  }
  message_2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_2);
  // @@protoc_insertion_point(field_set_allocated:differentialservice.log.message_2)
}

// string name_of_message_descriptor = 3;
inline void log::clear_name_of_message_descriptor() {
  name_of_message_descriptor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& log::name_of_message_descriptor() const {
  // @@protoc_insertion_point(field_get:differentialservice.log.name_of_message_descriptor)
  return _internal_name_of_message_descriptor();
}
inline void log::set_name_of_message_descriptor(const std::string& value) {
  _internal_set_name_of_message_descriptor(value);
  // @@protoc_insertion_point(field_set:differentialservice.log.name_of_message_descriptor)
}
inline std::string* log::mutable_name_of_message_descriptor() {
  // @@protoc_insertion_point(field_mutable:differentialservice.log.name_of_message_descriptor)
  return _internal_mutable_name_of_message_descriptor();
}
inline const std::string& log::_internal_name_of_message_descriptor() const {
  return name_of_message_descriptor_.GetNoArena();
}
inline void log::_internal_set_name_of_message_descriptor(const std::string& value) {
  
  name_of_message_descriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void log::set_name_of_message_descriptor(std::string&& value) {
  
  name_of_message_descriptor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differentialservice.log.name_of_message_descriptor)
}
inline void log::set_name_of_message_descriptor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_of_message_descriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differentialservice.log.name_of_message_descriptor)
}
inline void log::set_name_of_message_descriptor(const char* value, size_t size) {
  
  name_of_message_descriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differentialservice.log.name_of_message_descriptor)
}
inline std::string* log::_internal_mutable_name_of_message_descriptor() {
  
  return name_of_message_descriptor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* log::release_name_of_message_descriptor() {
  // @@protoc_insertion_point(field_release:differentialservice.log.name_of_message_descriptor)
  
  return name_of_message_descriptor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void log::set_allocated_name_of_message_descriptor(std::string* name_of_message_descriptor) {
  if (name_of_message_descriptor != nullptr) {
    
  } else {
    
  }
  name_of_message_descriptor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_of_message_descriptor);
  // @@protoc_insertion_point(field_set_allocated:differentialservice.log.name_of_message_descriptor)
}

// repeated bytes file_descriptor_proto = 4;
inline int log::_internal_file_descriptor_proto_size() const {
  return file_descriptor_proto_.size();
}
inline int log::file_descriptor_proto_size() const {
  return _internal_file_descriptor_proto_size();
}
inline void log::clear_file_descriptor_proto() {
  file_descriptor_proto_.Clear();
}
inline std::string* log::add_file_descriptor_proto() {
  // @@protoc_insertion_point(field_add_mutable:differentialservice.log.file_descriptor_proto)
  return _internal_add_file_descriptor_proto();
}
inline const std::string& log::_internal_file_descriptor_proto(int index) const {
  return file_descriptor_proto_.Get(index);
}
inline const std::string& log::file_descriptor_proto(int index) const {
  // @@protoc_insertion_point(field_get:differentialservice.log.file_descriptor_proto)
  return _internal_file_descriptor_proto(index);
}
inline std::string* log::mutable_file_descriptor_proto(int index) {
  // @@protoc_insertion_point(field_mutable:differentialservice.log.file_descriptor_proto)
  return file_descriptor_proto_.Mutable(index);
}
inline void log::set_file_descriptor_proto(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:differentialservice.log.file_descriptor_proto)
  file_descriptor_proto_.Mutable(index)->assign(value);
}
inline void log::set_file_descriptor_proto(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:differentialservice.log.file_descriptor_proto)
  file_descriptor_proto_.Mutable(index)->assign(std::move(value));
}
inline void log::set_file_descriptor_proto(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_descriptor_proto_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:differentialservice.log.file_descriptor_proto)
}
inline void log::set_file_descriptor_proto(int index, const void* value, size_t size) {
  file_descriptor_proto_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:differentialservice.log.file_descriptor_proto)
}
inline std::string* log::_internal_add_file_descriptor_proto() {
  return file_descriptor_proto_.Add();
}
inline void log::add_file_descriptor_proto(const std::string& value) {
  file_descriptor_proto_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:differentialservice.log.file_descriptor_proto)
}
inline void log::add_file_descriptor_proto(std::string&& value) {
  file_descriptor_proto_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:differentialservice.log.file_descriptor_proto)
}
inline void log::add_file_descriptor_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_descriptor_proto_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:differentialservice.log.file_descriptor_proto)
}
inline void log::add_file_descriptor_proto(const void* value, size_t size) {
  file_descriptor_proto_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:differentialservice.log.file_descriptor_proto)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
log::file_descriptor_proto() const {
  // @@protoc_insertion_point(field_list:differentialservice.log.file_descriptor_proto)
  return file_descriptor_proto_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
log::mutable_file_descriptor_proto() {
  // @@protoc_insertion_point(field_mutable_list:differentialservice.log.file_descriptor_proto)
  return &file_descriptor_proto_;
}

// .differentialservice.ignoreCriteria user_ignore = 5;
inline bool log::_internal_has_user_ignore() const {
  return this != internal_default_instance() && user_ignore_ != nullptr;
}
inline bool log::has_user_ignore() const {
  return _internal_has_user_ignore();
}
inline void log::clear_user_ignore() {
  if (GetArenaNoVirtual() == nullptr && user_ignore_ != nullptr) {
    delete user_ignore_;
  }
  user_ignore_ = nullptr;
}
inline const ::differentialservice::ignoreCriteria& log::_internal_user_ignore() const {
  const ::differentialservice::ignoreCriteria* p = user_ignore_;
  return p != nullptr ? *p : *reinterpret_cast<const ::differentialservice::ignoreCriteria*>(
      &::differentialservice::_ignoreCriteria_default_instance_);
}
inline const ::differentialservice::ignoreCriteria& log::user_ignore() const {
  // @@protoc_insertion_point(field_get:differentialservice.log.user_ignore)
  return _internal_user_ignore();
}
inline ::differentialservice::ignoreCriteria* log::release_user_ignore() {
  // @@protoc_insertion_point(field_release:differentialservice.log.user_ignore)
  
  ::differentialservice::ignoreCriteria* temp = user_ignore_;
  user_ignore_ = nullptr;
  return temp;
}
inline ::differentialservice::ignoreCriteria* log::_internal_mutable_user_ignore() {
  
  if (user_ignore_ == nullptr) {
    auto* p = CreateMaybeMessage<::differentialservice::ignoreCriteria>(GetArenaNoVirtual());
    user_ignore_ = p;
  }
  return user_ignore_;
}
inline ::differentialservice::ignoreCriteria* log::mutable_user_ignore() {
  // @@protoc_insertion_point(field_mutable:differentialservice.log.user_ignore)
  return _internal_mutable_user_ignore();
}
inline void log::set_allocated_user_ignore(::differentialservice::ignoreCriteria* user_ignore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_ignore_;
  }
  if (user_ignore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_ignore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_ignore, submessage_arena);
    }
    
  } else {
    
  }
  user_ignore_ = user_ignore;
  // @@protoc_insertion_point(field_set_allocated:differentialservice.log.user_ignore)
}

// repeated .differentialservice.repeatedFieldTuple repeated_field = 6;
inline int log::_internal_repeated_field_size() const {
  return repeated_field_.size();
}
inline int log::repeated_field_size() const {
  return _internal_repeated_field_size();
}
inline void log::clear_repeated_field() {
  repeated_field_.Clear();
}
inline ::differentialservice::repeatedFieldTuple* log::mutable_repeated_field(int index) {
  // @@protoc_insertion_point(field_mutable:differentialservice.log.repeated_field)
  return repeated_field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differentialservice::repeatedFieldTuple >*
log::mutable_repeated_field() {
  // @@protoc_insertion_point(field_mutable_list:differentialservice.log.repeated_field)
  return &repeated_field_;
}
inline const ::differentialservice::repeatedFieldTuple& log::_internal_repeated_field(int index) const {
  return repeated_field_.Get(index);
}
inline const ::differentialservice::repeatedFieldTuple& log::repeated_field(int index) const {
  // @@protoc_insertion_point(field_get:differentialservice.log.repeated_field)
  return _internal_repeated_field(index);
}
inline ::differentialservice::repeatedFieldTuple* log::_internal_add_repeated_field() {
  return repeated_field_.Add();
}
inline ::differentialservice::repeatedFieldTuple* log::add_repeated_field() {
  // @@protoc_insertion_point(field_add:differentialservice.log.repeated_field)
  return _internal_add_repeated_field();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differentialservice::repeatedFieldTuple >&
log::repeated_field() const {
  // @@protoc_insertion_point(field_list:differentialservice.log.repeated_field)
  return repeated_field_;
}

// repeated .differentialservice.mapvalueTuple mapvaluecompare = 7;
inline int log::_internal_mapvaluecompare_size() const {
  return mapvaluecompare_.size();
}
inline int log::mapvaluecompare_size() const {
  return _internal_mapvaluecompare_size();
}
inline void log::clear_mapvaluecompare() {
  mapvaluecompare_.Clear();
}
inline ::differentialservice::mapvalueTuple* log::mutable_mapvaluecompare(int index) {
  // @@protoc_insertion_point(field_mutable:differentialservice.log.mapvaluecompare)
  return mapvaluecompare_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differentialservice::mapvalueTuple >*
log::mutable_mapvaluecompare() {
  // @@protoc_insertion_point(field_mutable_list:differentialservice.log.mapvaluecompare)
  return &mapvaluecompare_;
}
inline const ::differentialservice::mapvalueTuple& log::_internal_mapvaluecompare(int index) const {
  return mapvaluecompare_.Get(index);
}
inline const ::differentialservice::mapvalueTuple& log::mapvaluecompare(int index) const {
  // @@protoc_insertion_point(field_get:differentialservice.log.mapvaluecompare)
  return _internal_mapvaluecompare(index);
}
inline ::differentialservice::mapvalueTuple* log::_internal_add_mapvaluecompare() {
  return mapvaluecompare_.Add();
}
inline ::differentialservice::mapvalueTuple* log::add_mapvaluecompare() {
  // @@protoc_insertion_point(field_add:differentialservice.log.mapvaluecompare)
  return _internal_add_mapvaluecompare();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differentialservice::mapvalueTuple >&
log::mapvaluecompare() const {
  // @@protoc_insertion_point(field_list:differentialservice.log.mapvaluecompare)
  return mapvaluecompare_;
}

// .differentialservice.float_comparison fraction_margin = 8;
inline bool log::_internal_has_fraction_margin() const {
  return this != internal_default_instance() && fraction_margin_ != nullptr;
}
inline bool log::has_fraction_margin() const {
  return _internal_has_fraction_margin();
}
inline void log::clear_fraction_margin() {
  if (GetArenaNoVirtual() == nullptr && fraction_margin_ != nullptr) {
    delete fraction_margin_;
  }
  fraction_margin_ = nullptr;
}
inline const ::differentialservice::float_comparison& log::_internal_fraction_margin() const {
  const ::differentialservice::float_comparison* p = fraction_margin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::differentialservice::float_comparison*>(
      &::differentialservice::_float_comparison_default_instance_);
}
inline const ::differentialservice::float_comparison& log::fraction_margin() const {
  // @@protoc_insertion_point(field_get:differentialservice.log.fraction_margin)
  return _internal_fraction_margin();
}
inline ::differentialservice::float_comparison* log::release_fraction_margin() {
  // @@protoc_insertion_point(field_release:differentialservice.log.fraction_margin)
  
  ::differentialservice::float_comparison* temp = fraction_margin_;
  fraction_margin_ = nullptr;
  return temp;
}
inline ::differentialservice::float_comparison* log::_internal_mutable_fraction_margin() {
  
  if (fraction_margin_ == nullptr) {
    auto* p = CreateMaybeMessage<::differentialservice::float_comparison>(GetArenaNoVirtual());
    fraction_margin_ = p;
  }
  return fraction_margin_;
}
inline ::differentialservice::float_comparison* log::mutable_fraction_margin() {
  // @@protoc_insertion_point(field_mutable:differentialservice.log.fraction_margin)
  return _internal_mutable_fraction_margin();
}
inline void log::set_allocated_fraction_margin(::differentialservice::float_comparison* fraction_margin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fraction_margin_;
  }
  if (fraction_margin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fraction_margin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fraction_margin, submessage_arena);
    }
    
  } else {
    
  }
  fraction_margin_ = fraction_margin;
  // @@protoc_insertion_point(field_set_allocated:differentialservice.log.fraction_margin)
}

// -------------------------------------------------------------------

// result

// string res = 1;
inline void result::clear_res() {
  res_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& result::res() const {
  // @@protoc_insertion_point(field_get:differentialservice.result.res)
  return _internal_res();
}
inline void result::set_res(const std::string& value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:differentialservice.result.res)
}
inline std::string* result::mutable_res() {
  // @@protoc_insertion_point(field_mutable:differentialservice.result.res)
  return _internal_mutable_res();
}
inline const std::string& result::_internal_res() const {
  return res_.GetNoArena();
}
inline void result::_internal_set_res(const std::string& value) {
  
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void result::set_res(std::string&& value) {
  
  res_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differentialservice.result.res)
}
inline void result::set_res(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differentialservice.result.res)
}
inline void result::set_res(const char* value, size_t size) {
  
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differentialservice.result.res)
}
inline std::string* result::_internal_mutable_res() {
  
  return res_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* result::release_res() {
  // @@protoc_insertion_point(field_release:differentialservice.result.res)
  
  return res_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void result::set_allocated_res(std::string* res) {
  if (res != nullptr) {
    
  } else {
    
  }
  res_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res);
  // @@protoc_insertion_point(field_set_allocated:differentialservice.result.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace differentialservice

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::differentialservice::ignoreCriteria_ignoreFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::differentialservice::ignoreCriteria_ignoreFlag>() {
  return ::differentialservice::ignoreCriteria_ignoreFlag_descriptor();
}
template <> struct is_proto_enum< ::differentialservice::repeatedFieldTuple_treatAsFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::differentialservice::repeatedFieldTuple_treatAsFlag>() {
  return ::differentialservice::repeatedFieldTuple_treatAsFlag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_differential_5fservice_2eproto
