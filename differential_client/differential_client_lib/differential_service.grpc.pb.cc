// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: differential_service.proto

#include "differential_service.pb.h"
#include "differential_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace differentialservice {

static const char* DifferentialServer_method_names[] = {
  "/differentialservice.DifferentialServer/GetConnect",
  "/differentialservice.DifferentialServer/DefaultDifferentialService",
  "/differentialservice.DifferentialServer/DifferentialService",
};

std::unique_ptr< DifferentialServer::Stub> DifferentialServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DifferentialServer::Stub> stub(new DifferentialServer::Stub(channel));
  return stub;
}

DifferentialServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetConnect_(DifferentialServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DefaultDifferentialService_(DifferentialServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DifferentialService_(DifferentialServer_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DifferentialServer::Stub::GetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::differentialservice::MsgReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetConnect_, context, request, response);
}

void DifferentialServer::Stub::experimental_async::GetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest* request, ::differentialservice::MsgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConnect_, context, request, response, std::move(f));
}

void DifferentialServer::Stub::experimental_async::GetConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::MsgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConnect_, context, request, response, std::move(f));
}

void DifferentialServer::Stub::experimental_async::GetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest* request, ::differentialservice::MsgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConnect_, context, request, response, reactor);
}

void DifferentialServer::Stub::experimental_async::GetConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::MsgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::differentialservice::MsgReply>* DifferentialServer::Stub::AsyncGetConnectRaw(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::differentialservice::MsgReply>::Create(channel_.get(), cq, rpcmethod_GetConnect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::differentialservice::MsgReply>* DifferentialServer::Stub::PrepareAsyncGetConnectRaw(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::differentialservice::MsgReply>::Create(channel_.get(), cq, rpcmethod_GetConnect_, context, request, false);
}

::grpc::Status DifferentialServer::Stub::DefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::differentialservice::result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DefaultDifferentialService_, context, request, response);
}

void DifferentialServer::Stub::experimental_async::DefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DefaultDifferentialService_, context, request, response, std::move(f));
}

void DifferentialServer::Stub::experimental_async::DefaultDifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DefaultDifferentialService_, context, request, response, std::move(f));
}

void DifferentialServer::Stub::experimental_async::DefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DefaultDifferentialService_, context, request, response, reactor);
}

void DifferentialServer::Stub::experimental_async::DefaultDifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DefaultDifferentialService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::differentialservice::result>* DifferentialServer::Stub::AsyncDefaultDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::differentialservice::result>::Create(channel_.get(), cq, rpcmethod_DefaultDifferentialService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::differentialservice::result>* DifferentialServer::Stub::PrepareAsyncDefaultDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::differentialservice::result>::Create(channel_.get(), cq, rpcmethod_DefaultDifferentialService_, context, request, false);
}

::grpc::Status DifferentialServer::Stub::DifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::differentialservice::result* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DifferentialService_, context, request, response);
}

void DifferentialServer::Stub::experimental_async::DifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DifferentialService_, context, request, response, std::move(f));
}

void DifferentialServer::Stub::experimental_async::DifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DifferentialService_, context, request, response, std::move(f));
}

void DifferentialServer::Stub::experimental_async::DifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DifferentialService_, context, request, response, reactor);
}

void DifferentialServer::Stub::experimental_async::DifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DifferentialService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::differentialservice::result>* DifferentialServer::Stub::AsyncDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::differentialservice::result>::Create(channel_.get(), cq, rpcmethod_DifferentialService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::differentialservice::result>* DifferentialServer::Stub::PrepareAsyncDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::differentialservice::result>::Create(channel_.get(), cq, rpcmethod_DifferentialService_, context, request, false);
}

DifferentialServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DifferentialServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DifferentialServer::Service, ::differentialservice::MsgRequest, ::differentialservice::MsgReply>(
          std::mem_fn(&DifferentialServer::Service::GetConnect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DifferentialServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DifferentialServer::Service, ::differentialservice::log, ::differentialservice::result>(
          std::mem_fn(&DifferentialServer::Service::DefaultDifferentialService), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DifferentialServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DifferentialServer::Service, ::differentialservice::log, ::differentialservice::result>(
          std::mem_fn(&DifferentialServer::Service::DifferentialService), this)));
}

DifferentialServer::Service::~Service() {
}

::grpc::Status DifferentialServer::Service::GetConnect(::grpc::ServerContext* context, const ::differentialservice::MsgRequest* request, ::differentialservice::MsgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DifferentialServer::Service::DefaultDifferentialService(::grpc::ServerContext* context, const ::differentialservice::log* request, ::differentialservice::result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DifferentialServer::Service::DifferentialService(::grpc::ServerContext* context, const ::differentialservice::log* request, ::differentialservice::result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace differentialservice

