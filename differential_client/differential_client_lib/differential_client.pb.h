// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: differential_client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_differential_5fclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_differential_5fclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "differential_service.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_differential_5fclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_differential_5fclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_differential_5fclient_2eproto;
namespace differential_client {
class company;
class companyDefaultTypeInternal;
extern companyDefaultTypeInternal _company_default_instance_;
class dependent_info;
class dependent_infoDefaultTypeInternal;
extern dependent_infoDefaultTypeInternal _dependent_info_default_instance_;
class education_info;
class education_infoDefaultTypeInternal;
extern education_infoDefaultTypeInternal _education_info_default_instance_;
class employee;
class employeeDefaultTypeInternal;
extern employeeDefaultTypeInternal _employee_default_instance_;
class employee_InfoEntry_DoNotUse;
class employee_InfoEntry_DoNotUseDefaultTypeInternal;
extern employee_InfoEntry_DoNotUseDefaultTypeInternal _employee_InfoEntry_DoNotUse_default_instance_;
class field_set;
class field_setDefaultTypeInternal;
extern field_setDefaultTypeInternal _field_set_default_instance_;
}  // namespace differential_client
PROTOBUF_NAMESPACE_OPEN
template<> ::differential_client::company* Arena::CreateMaybeMessage<::differential_client::company>(Arena*);
template<> ::differential_client::dependent_info* Arena::CreateMaybeMessage<::differential_client::dependent_info>(Arena*);
template<> ::differential_client::education_info* Arena::CreateMaybeMessage<::differential_client::education_info>(Arena*);
template<> ::differential_client::employee* Arena::CreateMaybeMessage<::differential_client::employee>(Arena*);
template<> ::differential_client::employee_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::differential_client::employee_InfoEntry_DoNotUse>(Arena*);
template<> ::differential_client::field_set* Arena::CreateMaybeMessage<::differential_client::field_set>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace differential_client {

// ===================================================================

class company :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differential_client.company) */ {
 public:
  company();
  virtual ~company();

  company(const company& from);
  company(company&& from) noexcept
    : company() {
    *this = ::std::move(from);
  }

  inline company& operator=(const company& from) {
    CopyFrom(from);
    return *this;
  }
  inline company& operator=(company&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const company& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const company* internal_default_instance() {
    return reinterpret_cast<const company*>(
               &_company_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(company& a, company& b) {
    a.Swap(&b);
  }
  inline void Swap(company* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline company* New() const final {
    return CreateMaybeMessage<company>(nullptr);
  }

  company* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<company>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const company& from);
  void MergeFrom(const company& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(company* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differential_client.company";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fclient_2eproto);
    return ::descriptor_table_differential_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOccupationFieldNumber = 2,
    kAddressFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string occupation = 2;
  void clear_occupation();
  const std::string& occupation() const;
  void set_occupation(const std::string& value);
  void set_occupation(std::string&& value);
  void set_occupation(const char* value);
  void set_occupation(const char* value, size_t size);
  std::string* mutable_occupation();
  std::string* release_occupation();
  void set_allocated_occupation(std::string* occupation);
  private:
  const std::string& _internal_occupation() const;
  void _internal_set_occupation(const std::string& value);
  std::string* _internal_mutable_occupation();
  public:

  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:differential_client.company)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr occupation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fclient_2eproto;
};
// -------------------------------------------------------------------

class education_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differential_client.education_info) */ {
 public:
  education_info();
  virtual ~education_info();

  education_info(const education_info& from);
  education_info(education_info&& from) noexcept
    : education_info() {
    *this = ::std::move(from);
  }

  inline education_info& operator=(const education_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline education_info& operator=(education_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const education_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const education_info* internal_default_instance() {
    return reinterpret_cast<const education_info*>(
               &_education_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(education_info& a, education_info& b) {
    a.Swap(&b);
  }
  inline void Swap(education_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline education_info* New() const final {
    return CreateMaybeMessage<education_info>(nullptr);
  }

  education_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<education_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const education_info& from);
  void MergeFrom(const education_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(education_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differential_client.education_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fclient_2eproto);
    return ::descriptor_table_differential_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDegreeFieldNumber = 2,
    kMajorFieldNumber = 3,
    kAddressFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string degree = 2;
  void clear_degree();
  const std::string& degree() const;
  void set_degree(const std::string& value);
  void set_degree(std::string&& value);
  void set_degree(const char* value);
  void set_degree(const char* value, size_t size);
  std::string* mutable_degree();
  std::string* release_degree();
  void set_allocated_degree(std::string* degree);
  private:
  const std::string& _internal_degree() const;
  void _internal_set_degree(const std::string& value);
  std::string* _internal_mutable_degree();
  public:

  // string major = 3;
  void clear_major();
  const std::string& major() const;
  void set_major(const std::string& value);
  void set_major(std::string&& value);
  void set_major(const char* value);
  void set_major(const char* value, size_t size);
  std::string* mutable_major();
  std::string* release_major();
  void set_allocated_major(std::string* major);
  private:
  const std::string& _internal_major() const;
  void _internal_set_major(const std::string& value);
  std::string* _internal_mutable_major();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:differential_client.education_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr degree_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr major_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fclient_2eproto;
};
// -------------------------------------------------------------------

class dependent_info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differential_client.dependent_info) */ {
 public:
  dependent_info();
  virtual ~dependent_info();

  dependent_info(const dependent_info& from);
  dependent_info(dependent_info&& from) noexcept
    : dependent_info() {
    *this = ::std::move(from);
  }

  inline dependent_info& operator=(const dependent_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline dependent_info& operator=(dependent_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dependent_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dependent_info* internal_default_instance() {
    return reinterpret_cast<const dependent_info*>(
               &_dependent_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(dependent_info& a, dependent_info& b) {
    a.Swap(&b);
  }
  inline void Swap(dependent_info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dependent_info* New() const final {
    return CreateMaybeMessage<dependent_info>(nullptr);
  }

  dependent_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dependent_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dependent_info& from);
  void MergeFrom(const dependent_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dependent_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differential_client.dependent_info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fclient_2eproto);
    return ::descriptor_table_differential_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // repeated int32 age = 2;
  int age_size() const;
  private:
  int _internal_age_size() const;
  public:
  void clear_age();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_age() const;
  void _internal_add_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_age();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 age(int index) const;
  void set_age(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      age() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_age();

  // @@protoc_insertion_point(class_scope:differential_client.dependent_info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > age_;
  mutable std::atomic<int> _age_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fclient_2eproto;
};
// -------------------------------------------------------------------

class field_set :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differential_client.field_set) */ {
 public:
  field_set();
  virtual ~field_set();

  field_set(const field_set& from);
  field_set(field_set&& from) noexcept
    : field_set() {
    *this = ::std::move(from);
  }

  inline field_set& operator=(const field_set& from) {
    CopyFrom(from);
    return *this;
  }
  inline field_set& operator=(field_set&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const field_set& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const field_set* internal_default_instance() {
    return reinterpret_cast<const field_set*>(
               &_field_set_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(field_set& a, field_set& b) {
    a.Swap(&b);
  }
  inline void Swap(field_set* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline field_set* New() const final {
    return CreateMaybeMessage<field_set>(nullptr);
  }

  field_set* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<field_set>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const field_set& from);
  void MergeFrom(const field_set& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(field_set* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differential_client.field_set";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fclient_2eproto);
    return ::descriptor_table_differential_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExam1FieldNumber = 1,
    kExam2FieldNumber = 3,
    kScore1FieldNumber = 2,
    kScore2FieldNumber = 4,
  };
  // string exam1 = 1;
  void clear_exam1();
  const std::string& exam1() const;
  void set_exam1(const std::string& value);
  void set_exam1(std::string&& value);
  void set_exam1(const char* value);
  void set_exam1(const char* value, size_t size);
  std::string* mutable_exam1();
  std::string* release_exam1();
  void set_allocated_exam1(std::string* exam1);
  private:
  const std::string& _internal_exam1() const;
  void _internal_set_exam1(const std::string& value);
  std::string* _internal_mutable_exam1();
  public:

  // string exam2 = 3;
  void clear_exam2();
  const std::string& exam2() const;
  void set_exam2(const std::string& value);
  void set_exam2(std::string&& value);
  void set_exam2(const char* value);
  void set_exam2(const char* value, size_t size);
  std::string* mutable_exam2();
  std::string* release_exam2();
  void set_allocated_exam2(std::string* exam2);
  private:
  const std::string& _internal_exam2() const;
  void _internal_set_exam2(const std::string& value);
  std::string* _internal_mutable_exam2();
  public:

  // int32 score1 = 2;
  void clear_score1();
  ::PROTOBUF_NAMESPACE_ID::int32 score1() const;
  void set_score1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score1() const;
  void _internal_set_score1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float score2 = 4;
  void clear_score2();
  float score2() const;
  void set_score2(float value);
  private:
  float _internal_score2() const;
  void _internal_set_score2(float value);
  public:

  // @@protoc_insertion_point(class_scope:differential_client.field_set)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exam1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exam2_;
  ::PROTOBUF_NAMESPACE_ID::int32 score1_;
  float score2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fclient_2eproto;
};
// -------------------------------------------------------------------

class employee_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<employee_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<employee_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  employee_InfoEntry_DoNotUse();
  employee_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const employee_InfoEntry_DoNotUse& other);
  static const employee_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const employee_InfoEntry_DoNotUse*>(&_employee_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "differential_client.employee.InfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "differential_client.employee.InfoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fclient_2eproto);
    return ::descriptor_table_differential_5fclient_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class employee :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:differential_client.employee) */ {
 public:
  employee();
  virtual ~employee();

  employee(const employee& from);
  employee(employee&& from) noexcept
    : employee() {
    *this = ::std::move(from);
  }

  inline employee& operator=(const employee& from) {
    CopyFrom(from);
    return *this;
  }
  inline employee& operator=(employee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const employee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const employee* internal_default_instance() {
    return reinterpret_cast<const employee*>(
               &_employee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(employee& a, employee& b) {
    a.Swap(&b);
  }
  inline void Swap(employee* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline employee* New() const final {
    return CreateMaybeMessage<employee>(nullptr);
  }

  employee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<employee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const employee& from);
  void MergeFrom(const employee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(employee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "differential_client.employee";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fclient_2eproto);
    return ::descriptor_table_differential_5fclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAreasFieldNumber = 5,
    kEducationFieldNumber = 6,
    kFooFieldNumber = 9,
    kInfoFieldNumber = 10,
    kFullnameFieldNumber = 2,
    kEmployerFieldNumber = 4,
    kDependentsFieldNumber = 7,
    kEmployIdFieldNumber = 1,
    kAgeFieldNumber = 3,
    kFloatpointFieldNumber = 8,
  };
  // repeated string areas = 5;
  int areas_size() const;
  private:
  int _internal_areas_size() const;
  public:
  void clear_areas();
  const std::string& areas(int index) const;
  std::string* mutable_areas(int index);
  void set_areas(int index, const std::string& value);
  void set_areas(int index, std::string&& value);
  void set_areas(int index, const char* value);
  void set_areas(int index, const char* value, size_t size);
  std::string* add_areas();
  void add_areas(const std::string& value);
  void add_areas(std::string&& value);
  void add_areas(const char* value);
  void add_areas(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& areas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_areas();
  private:
  const std::string& _internal_areas(int index) const;
  std::string* _internal_add_areas();
  public:

  // repeated .differential_client.education_info education = 6;
  int education_size() const;
  private:
  int _internal_education_size() const;
  public:
  void clear_education();
  ::differential_client::education_info* mutable_education(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differential_client::education_info >*
      mutable_education();
  private:
  const ::differential_client::education_info& _internal_education(int index) const;
  ::differential_client::education_info* _internal_add_education();
  public:
  const ::differential_client::education_info& education(int index) const;
  ::differential_client::education_info* add_education();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differential_client::education_info >&
      education() const;

  // repeated .differential_client.field_set foo = 9;
  int foo_size() const;
  private:
  int _internal_foo_size() const;
  public:
  void clear_foo();
  ::differential_client::field_set* mutable_foo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differential_client::field_set >*
      mutable_foo();
  private:
  const ::differential_client::field_set& _internal_foo(int index) const;
  ::differential_client::field_set* _internal_add_foo();
  public:
  const ::differential_client::field_set& foo(int index) const;
  ::differential_client::field_set* add_foo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differential_client::field_set >&
      foo() const;

  // map<string, string> info = 10;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_info();

  // string fullname = 2;
  void clear_fullname();
  const std::string& fullname() const;
  void set_fullname(const std::string& value);
  void set_fullname(std::string&& value);
  void set_fullname(const char* value);
  void set_fullname(const char* value, size_t size);
  std::string* mutable_fullname();
  std::string* release_fullname();
  void set_allocated_fullname(std::string* fullname);
  private:
  const std::string& _internal_fullname() const;
  void _internal_set_fullname(const std::string& value);
  std::string* _internal_mutable_fullname();
  public:

  // .differential_client.company employer = 4;
  bool has_employer() const;
  private:
  bool _internal_has_employer() const;
  public:
  void clear_employer();
  const ::differential_client::company& employer() const;
  ::differential_client::company* release_employer();
  ::differential_client::company* mutable_employer();
  void set_allocated_employer(::differential_client::company* employer);
  private:
  const ::differential_client::company& _internal_employer() const;
  ::differential_client::company* _internal_mutable_employer();
  public:

  // .differential_client.dependent_info dependents = 7;
  bool has_dependents() const;
  private:
  bool _internal_has_dependents() const;
  public:
  void clear_dependents();
  const ::differential_client::dependent_info& dependents() const;
  ::differential_client::dependent_info* release_dependents();
  ::differential_client::dependent_info* mutable_dependents();
  void set_allocated_dependents(::differential_client::dependent_info* dependents);
  private:
  const ::differential_client::dependent_info& _internal_dependents() const;
  ::differential_client::dependent_info* _internal_mutable_dependents();
  public:

  // int32 employ_id = 1;
  void clear_employ_id();
  ::PROTOBUF_NAMESPACE_ID::int32 employ_id() const;
  void set_employ_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_employ_id() const;
  void _internal_set_employ_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 age = 3;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double floatpoint = 8;
  void clear_floatpoint();
  double floatpoint() const;
  void set_floatpoint(double value);
  private:
  double _internal_floatpoint() const;
  void _internal_set_floatpoint(double value);
  public:

  // @@protoc_insertion_point(class_scope:differential_client.employee)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> areas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differential_client::education_info > education_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differential_client::field_set > foo_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      employee_InfoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
  ::differential_client::company* employer_;
  ::differential_client::dependent_info* dependents_;
  ::PROTOBUF_NAMESPACE_ID::int32 employ_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  double floatpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fclient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// company

// string name = 1;
inline void company::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& company::name() const {
  // @@protoc_insertion_point(field_get:differential_client.company.name)
  return _internal_name();
}
inline void company::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:differential_client.company.name)
}
inline std::string* company::mutable_name() {
  // @@protoc_insertion_point(field_mutable:differential_client.company.name)
  return _internal_mutable_name();
}
inline const std::string& company::_internal_name() const {
  return name_.GetNoArena();
}
inline void company::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void company::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differential_client.company.name)
}
inline void company::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differential_client.company.name)
}
inline void company::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differential_client.company.name)
}
inline std::string* company::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* company::release_name() {
  // @@protoc_insertion_point(field_release:differential_client.company.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void company::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:differential_client.company.name)
}

// string occupation = 2;
inline void company::clear_occupation() {
  occupation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& company::occupation() const {
  // @@protoc_insertion_point(field_get:differential_client.company.occupation)
  return _internal_occupation();
}
inline void company::set_occupation(const std::string& value) {
  _internal_set_occupation(value);
  // @@protoc_insertion_point(field_set:differential_client.company.occupation)
}
inline std::string* company::mutable_occupation() {
  // @@protoc_insertion_point(field_mutable:differential_client.company.occupation)
  return _internal_mutable_occupation();
}
inline const std::string& company::_internal_occupation() const {
  return occupation_.GetNoArena();
}
inline void company::_internal_set_occupation(const std::string& value) {
  
  occupation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void company::set_occupation(std::string&& value) {
  
  occupation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differential_client.company.occupation)
}
inline void company::set_occupation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  occupation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differential_client.company.occupation)
}
inline void company::set_occupation(const char* value, size_t size) {
  
  occupation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differential_client.company.occupation)
}
inline std::string* company::_internal_mutable_occupation() {
  
  return occupation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* company::release_occupation() {
  // @@protoc_insertion_point(field_release:differential_client.company.occupation)
  
  return occupation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void company::set_allocated_occupation(std::string* occupation) {
  if (occupation != nullptr) {
    
  } else {
    
  }
  occupation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), occupation);
  // @@protoc_insertion_point(field_set_allocated:differential_client.company.occupation)
}

// string address = 3;
inline void company::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& company::address() const {
  // @@protoc_insertion_point(field_get:differential_client.company.address)
  return _internal_address();
}
inline void company::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:differential_client.company.address)
}
inline std::string* company::mutable_address() {
  // @@protoc_insertion_point(field_mutable:differential_client.company.address)
  return _internal_mutable_address();
}
inline const std::string& company::_internal_address() const {
  return address_.GetNoArena();
}
inline void company::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void company::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differential_client.company.address)
}
inline void company::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differential_client.company.address)
}
inline void company::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differential_client.company.address)
}
inline std::string* company::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* company::release_address() {
  // @@protoc_insertion_point(field_release:differential_client.company.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void company::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:differential_client.company.address)
}

// -------------------------------------------------------------------

// education_info

// string name = 1;
inline void education_info::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& education_info::name() const {
  // @@protoc_insertion_point(field_get:differential_client.education_info.name)
  return _internal_name();
}
inline void education_info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:differential_client.education_info.name)
}
inline std::string* education_info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:differential_client.education_info.name)
  return _internal_mutable_name();
}
inline const std::string& education_info::_internal_name() const {
  return name_.GetNoArena();
}
inline void education_info::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void education_info::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differential_client.education_info.name)
}
inline void education_info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differential_client.education_info.name)
}
inline void education_info::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differential_client.education_info.name)
}
inline std::string* education_info::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* education_info::release_name() {
  // @@protoc_insertion_point(field_release:differential_client.education_info.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void education_info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:differential_client.education_info.name)
}

// string degree = 2;
inline void education_info::clear_degree() {
  degree_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& education_info::degree() const {
  // @@protoc_insertion_point(field_get:differential_client.education_info.degree)
  return _internal_degree();
}
inline void education_info::set_degree(const std::string& value) {
  _internal_set_degree(value);
  // @@protoc_insertion_point(field_set:differential_client.education_info.degree)
}
inline std::string* education_info::mutable_degree() {
  // @@protoc_insertion_point(field_mutable:differential_client.education_info.degree)
  return _internal_mutable_degree();
}
inline const std::string& education_info::_internal_degree() const {
  return degree_.GetNoArena();
}
inline void education_info::_internal_set_degree(const std::string& value) {
  
  degree_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void education_info::set_degree(std::string&& value) {
  
  degree_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differential_client.education_info.degree)
}
inline void education_info::set_degree(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  degree_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differential_client.education_info.degree)
}
inline void education_info::set_degree(const char* value, size_t size) {
  
  degree_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differential_client.education_info.degree)
}
inline std::string* education_info::_internal_mutable_degree() {
  
  return degree_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* education_info::release_degree() {
  // @@protoc_insertion_point(field_release:differential_client.education_info.degree)
  
  return degree_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void education_info::set_allocated_degree(std::string* degree) {
  if (degree != nullptr) {
    
  } else {
    
  }
  degree_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), degree);
  // @@protoc_insertion_point(field_set_allocated:differential_client.education_info.degree)
}

// string major = 3;
inline void education_info::clear_major() {
  major_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& education_info::major() const {
  // @@protoc_insertion_point(field_get:differential_client.education_info.major)
  return _internal_major();
}
inline void education_info::set_major(const std::string& value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:differential_client.education_info.major)
}
inline std::string* education_info::mutable_major() {
  // @@protoc_insertion_point(field_mutable:differential_client.education_info.major)
  return _internal_mutable_major();
}
inline const std::string& education_info::_internal_major() const {
  return major_.GetNoArena();
}
inline void education_info::_internal_set_major(const std::string& value) {
  
  major_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void education_info::set_major(std::string&& value) {
  
  major_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differential_client.education_info.major)
}
inline void education_info::set_major(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  major_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differential_client.education_info.major)
}
inline void education_info::set_major(const char* value, size_t size) {
  
  major_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differential_client.education_info.major)
}
inline std::string* education_info::_internal_mutable_major() {
  
  return major_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* education_info::release_major() {
  // @@protoc_insertion_point(field_release:differential_client.education_info.major)
  
  return major_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void education_info::set_allocated_major(std::string* major) {
  if (major != nullptr) {
    
  } else {
    
  }
  major_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), major);
  // @@protoc_insertion_point(field_set_allocated:differential_client.education_info.major)
}

// string address = 4;
inline void education_info::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& education_info::address() const {
  // @@protoc_insertion_point(field_get:differential_client.education_info.address)
  return _internal_address();
}
inline void education_info::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:differential_client.education_info.address)
}
inline std::string* education_info::mutable_address() {
  // @@protoc_insertion_point(field_mutable:differential_client.education_info.address)
  return _internal_mutable_address();
}
inline const std::string& education_info::_internal_address() const {
  return address_.GetNoArena();
}
inline void education_info::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void education_info::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differential_client.education_info.address)
}
inline void education_info::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differential_client.education_info.address)
}
inline void education_info::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differential_client.education_info.address)
}
inline std::string* education_info::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* education_info::release_address() {
  // @@protoc_insertion_point(field_release:differential_client.education_info.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void education_info::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:differential_client.education_info.address)
}

// -------------------------------------------------------------------

// dependent_info

// repeated string name = 1;
inline int dependent_info::_internal_name_size() const {
  return name_.size();
}
inline int dependent_info::name_size() const {
  return _internal_name_size();
}
inline void dependent_info::clear_name() {
  name_.Clear();
}
inline std::string* dependent_info::add_name() {
  // @@protoc_insertion_point(field_add_mutable:differential_client.dependent_info.name)
  return _internal_add_name();
}
inline const std::string& dependent_info::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& dependent_info::name(int index) const {
  // @@protoc_insertion_point(field_get:differential_client.dependent_info.name)
  return _internal_name(index);
}
inline std::string* dependent_info::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:differential_client.dependent_info.name)
  return name_.Mutable(index);
}
inline void dependent_info::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:differential_client.dependent_info.name)
  name_.Mutable(index)->assign(value);
}
inline void dependent_info::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:differential_client.dependent_info.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void dependent_info::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:differential_client.dependent_info.name)
}
inline void dependent_info::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:differential_client.dependent_info.name)
}
inline std::string* dependent_info::_internal_add_name() {
  return name_.Add();
}
inline void dependent_info::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:differential_client.dependent_info.name)
}
inline void dependent_info::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:differential_client.dependent_info.name)
}
inline void dependent_info::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:differential_client.dependent_info.name)
}
inline void dependent_info::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:differential_client.dependent_info.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
dependent_info::name() const {
  // @@protoc_insertion_point(field_list:differential_client.dependent_info.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
dependent_info::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:differential_client.dependent_info.name)
  return &name_;
}

// repeated int32 age = 2;
inline int dependent_info::_internal_age_size() const {
  return age_.size();
}
inline int dependent_info::age_size() const {
  return _internal_age_size();
}
inline void dependent_info::clear_age() {
  age_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dependent_info::_internal_age(int index) const {
  return age_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 dependent_info::age(int index) const {
  // @@protoc_insertion_point(field_get:differential_client.dependent_info.age)
  return _internal_age(index);
}
inline void dependent_info::set_age(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  age_.Set(index, value);
  // @@protoc_insertion_point(field_set:differential_client.dependent_info.age)
}
inline void dependent_info::_internal_add_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  age_.Add(value);
}
inline void dependent_info::add_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_age(value);
  // @@protoc_insertion_point(field_add:differential_client.dependent_info.age)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
dependent_info::_internal_age() const {
  return age_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
dependent_info::age() const {
  // @@protoc_insertion_point(field_list:differential_client.dependent_info.age)
  return _internal_age();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
dependent_info::_internal_mutable_age() {
  return &age_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
dependent_info::mutable_age() {
  // @@protoc_insertion_point(field_mutable_list:differential_client.dependent_info.age)
  return _internal_mutable_age();
}

// -------------------------------------------------------------------

// field_set

// string exam1 = 1;
inline void field_set::clear_exam1() {
  exam1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& field_set::exam1() const {
  // @@protoc_insertion_point(field_get:differential_client.field_set.exam1)
  return _internal_exam1();
}
inline void field_set::set_exam1(const std::string& value) {
  _internal_set_exam1(value);
  // @@protoc_insertion_point(field_set:differential_client.field_set.exam1)
}
inline std::string* field_set::mutable_exam1() {
  // @@protoc_insertion_point(field_mutable:differential_client.field_set.exam1)
  return _internal_mutable_exam1();
}
inline const std::string& field_set::_internal_exam1() const {
  return exam1_.GetNoArena();
}
inline void field_set::_internal_set_exam1(const std::string& value) {
  
  exam1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void field_set::set_exam1(std::string&& value) {
  
  exam1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differential_client.field_set.exam1)
}
inline void field_set::set_exam1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exam1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differential_client.field_set.exam1)
}
inline void field_set::set_exam1(const char* value, size_t size) {
  
  exam1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differential_client.field_set.exam1)
}
inline std::string* field_set::_internal_mutable_exam1() {
  
  return exam1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* field_set::release_exam1() {
  // @@protoc_insertion_point(field_release:differential_client.field_set.exam1)
  
  return exam1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void field_set::set_allocated_exam1(std::string* exam1) {
  if (exam1 != nullptr) {
    
  } else {
    
  }
  exam1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exam1);
  // @@protoc_insertion_point(field_set_allocated:differential_client.field_set.exam1)
}

// int32 score1 = 2;
inline void field_set::clear_score1() {
  score1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 field_set::_internal_score1() const {
  return score1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 field_set::score1() const {
  // @@protoc_insertion_point(field_get:differential_client.field_set.score1)
  return _internal_score1();
}
inline void field_set::_internal_set_score1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score1_ = value;
}
inline void field_set::set_score1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score1(value);
  // @@protoc_insertion_point(field_set:differential_client.field_set.score1)
}

// string exam2 = 3;
inline void field_set::clear_exam2() {
  exam2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& field_set::exam2() const {
  // @@protoc_insertion_point(field_get:differential_client.field_set.exam2)
  return _internal_exam2();
}
inline void field_set::set_exam2(const std::string& value) {
  _internal_set_exam2(value);
  // @@protoc_insertion_point(field_set:differential_client.field_set.exam2)
}
inline std::string* field_set::mutable_exam2() {
  // @@protoc_insertion_point(field_mutable:differential_client.field_set.exam2)
  return _internal_mutable_exam2();
}
inline const std::string& field_set::_internal_exam2() const {
  return exam2_.GetNoArena();
}
inline void field_set::_internal_set_exam2(const std::string& value) {
  
  exam2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void field_set::set_exam2(std::string&& value) {
  
  exam2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differential_client.field_set.exam2)
}
inline void field_set::set_exam2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exam2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differential_client.field_set.exam2)
}
inline void field_set::set_exam2(const char* value, size_t size) {
  
  exam2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differential_client.field_set.exam2)
}
inline std::string* field_set::_internal_mutable_exam2() {
  
  return exam2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* field_set::release_exam2() {
  // @@protoc_insertion_point(field_release:differential_client.field_set.exam2)
  
  return exam2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void field_set::set_allocated_exam2(std::string* exam2) {
  if (exam2 != nullptr) {
    
  } else {
    
  }
  exam2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exam2);
  // @@protoc_insertion_point(field_set_allocated:differential_client.field_set.exam2)
}

// float score2 = 4;
inline void field_set::clear_score2() {
  score2_ = 0;
}
inline float field_set::_internal_score2() const {
  return score2_;
}
inline float field_set::score2() const {
  // @@protoc_insertion_point(field_get:differential_client.field_set.score2)
  return _internal_score2();
}
inline void field_set::_internal_set_score2(float value) {
  
  score2_ = value;
}
inline void field_set::set_score2(float value) {
  _internal_set_score2(value);
  // @@protoc_insertion_point(field_set:differential_client.field_set.score2)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// employee

// int32 employ_id = 1;
inline void employee::clear_employ_id() {
  employ_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 employee::_internal_employ_id() const {
  return employ_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 employee::employ_id() const {
  // @@protoc_insertion_point(field_get:differential_client.employee.employ_id)
  return _internal_employ_id();
}
inline void employee::_internal_set_employ_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  employ_id_ = value;
}
inline void employee::set_employ_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_employ_id(value);
  // @@protoc_insertion_point(field_set:differential_client.employee.employ_id)
}

// string fullname = 2;
inline void employee::clear_fullname() {
  fullname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& employee::fullname() const {
  // @@protoc_insertion_point(field_get:differential_client.employee.fullname)
  return _internal_fullname();
}
inline void employee::set_fullname(const std::string& value) {
  _internal_set_fullname(value);
  // @@protoc_insertion_point(field_set:differential_client.employee.fullname)
}
inline std::string* employee::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable:differential_client.employee.fullname)
  return _internal_mutable_fullname();
}
inline const std::string& employee::_internal_fullname() const {
  return fullname_.GetNoArena();
}
inline void employee::_internal_set_fullname(const std::string& value) {
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void employee::set_fullname(std::string&& value) {
  
  fullname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:differential_client.employee.fullname)
}
inline void employee::set_fullname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:differential_client.employee.fullname)
}
inline void employee::set_fullname(const char* value, size_t size) {
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:differential_client.employee.fullname)
}
inline std::string* employee::_internal_mutable_fullname() {
  
  return fullname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* employee::release_fullname() {
  // @@protoc_insertion_point(field_release:differential_client.employee.fullname)
  
  return fullname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void employee::set_allocated_fullname(std::string* fullname) {
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fullname);
  // @@protoc_insertion_point(field_set_allocated:differential_client.employee.fullname)
}

// int32 age = 3;
inline void employee::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 employee::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 employee::age() const {
  // @@protoc_insertion_point(field_get:differential_client.employee.age)
  return _internal_age();
}
inline void employee::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void employee::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:differential_client.employee.age)
}

// .differential_client.company employer = 4;
inline bool employee::_internal_has_employer() const {
  return this != internal_default_instance() && employer_ != nullptr;
}
inline bool employee::has_employer() const {
  return _internal_has_employer();
}
inline void employee::clear_employer() {
  if (GetArenaNoVirtual() == nullptr && employer_ != nullptr) {
    delete employer_;
  }
  employer_ = nullptr;
}
inline const ::differential_client::company& employee::_internal_employer() const {
  const ::differential_client::company* p = employer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::differential_client::company*>(
      &::differential_client::_company_default_instance_);
}
inline const ::differential_client::company& employee::employer() const {
  // @@protoc_insertion_point(field_get:differential_client.employee.employer)
  return _internal_employer();
}
inline ::differential_client::company* employee::release_employer() {
  // @@protoc_insertion_point(field_release:differential_client.employee.employer)
  
  ::differential_client::company* temp = employer_;
  employer_ = nullptr;
  return temp;
}
inline ::differential_client::company* employee::_internal_mutable_employer() {
  
  if (employer_ == nullptr) {
    auto* p = CreateMaybeMessage<::differential_client::company>(GetArenaNoVirtual());
    employer_ = p;
  }
  return employer_;
}
inline ::differential_client::company* employee::mutable_employer() {
  // @@protoc_insertion_point(field_mutable:differential_client.employee.employer)
  return _internal_mutable_employer();
}
inline void employee::set_allocated_employer(::differential_client::company* employer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete employer_;
  }
  if (employer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      employer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, employer, submessage_arena);
    }
    
  } else {
    
  }
  employer_ = employer;
  // @@protoc_insertion_point(field_set_allocated:differential_client.employee.employer)
}

// repeated string areas = 5;
inline int employee::_internal_areas_size() const {
  return areas_.size();
}
inline int employee::areas_size() const {
  return _internal_areas_size();
}
inline void employee::clear_areas() {
  areas_.Clear();
}
inline std::string* employee::add_areas() {
  // @@protoc_insertion_point(field_add_mutable:differential_client.employee.areas)
  return _internal_add_areas();
}
inline const std::string& employee::_internal_areas(int index) const {
  return areas_.Get(index);
}
inline const std::string& employee::areas(int index) const {
  // @@protoc_insertion_point(field_get:differential_client.employee.areas)
  return _internal_areas(index);
}
inline std::string* employee::mutable_areas(int index) {
  // @@protoc_insertion_point(field_mutable:differential_client.employee.areas)
  return areas_.Mutable(index);
}
inline void employee::set_areas(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:differential_client.employee.areas)
  areas_.Mutable(index)->assign(value);
}
inline void employee::set_areas(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:differential_client.employee.areas)
  areas_.Mutable(index)->assign(std::move(value));
}
inline void employee::set_areas(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  areas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:differential_client.employee.areas)
}
inline void employee::set_areas(int index, const char* value, size_t size) {
  areas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:differential_client.employee.areas)
}
inline std::string* employee::_internal_add_areas() {
  return areas_.Add();
}
inline void employee::add_areas(const std::string& value) {
  areas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:differential_client.employee.areas)
}
inline void employee::add_areas(std::string&& value) {
  areas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:differential_client.employee.areas)
}
inline void employee::add_areas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  areas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:differential_client.employee.areas)
}
inline void employee::add_areas(const char* value, size_t size) {
  areas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:differential_client.employee.areas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
employee::areas() const {
  // @@protoc_insertion_point(field_list:differential_client.employee.areas)
  return areas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
employee::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:differential_client.employee.areas)
  return &areas_;
}

// repeated .differential_client.education_info education = 6;
inline int employee::_internal_education_size() const {
  return education_.size();
}
inline int employee::education_size() const {
  return _internal_education_size();
}
inline void employee::clear_education() {
  education_.Clear();
}
inline ::differential_client::education_info* employee::mutable_education(int index) {
  // @@protoc_insertion_point(field_mutable:differential_client.employee.education)
  return education_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differential_client::education_info >*
employee::mutable_education() {
  // @@protoc_insertion_point(field_mutable_list:differential_client.employee.education)
  return &education_;
}
inline const ::differential_client::education_info& employee::_internal_education(int index) const {
  return education_.Get(index);
}
inline const ::differential_client::education_info& employee::education(int index) const {
  // @@protoc_insertion_point(field_get:differential_client.employee.education)
  return _internal_education(index);
}
inline ::differential_client::education_info* employee::_internal_add_education() {
  return education_.Add();
}
inline ::differential_client::education_info* employee::add_education() {
  // @@protoc_insertion_point(field_add:differential_client.employee.education)
  return _internal_add_education();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differential_client::education_info >&
employee::education() const {
  // @@protoc_insertion_point(field_list:differential_client.employee.education)
  return education_;
}

// .differential_client.dependent_info dependents = 7;
inline bool employee::_internal_has_dependents() const {
  return this != internal_default_instance() && dependents_ != nullptr;
}
inline bool employee::has_dependents() const {
  return _internal_has_dependents();
}
inline void employee::clear_dependents() {
  if (GetArenaNoVirtual() == nullptr && dependents_ != nullptr) {
    delete dependents_;
  }
  dependents_ = nullptr;
}
inline const ::differential_client::dependent_info& employee::_internal_dependents() const {
  const ::differential_client::dependent_info* p = dependents_;
  return p != nullptr ? *p : *reinterpret_cast<const ::differential_client::dependent_info*>(
      &::differential_client::_dependent_info_default_instance_);
}
inline const ::differential_client::dependent_info& employee::dependents() const {
  // @@protoc_insertion_point(field_get:differential_client.employee.dependents)
  return _internal_dependents();
}
inline ::differential_client::dependent_info* employee::release_dependents() {
  // @@protoc_insertion_point(field_release:differential_client.employee.dependents)
  
  ::differential_client::dependent_info* temp = dependents_;
  dependents_ = nullptr;
  return temp;
}
inline ::differential_client::dependent_info* employee::_internal_mutable_dependents() {
  
  if (dependents_ == nullptr) {
    auto* p = CreateMaybeMessage<::differential_client::dependent_info>(GetArenaNoVirtual());
    dependents_ = p;
  }
  return dependents_;
}
inline ::differential_client::dependent_info* employee::mutable_dependents() {
  // @@protoc_insertion_point(field_mutable:differential_client.employee.dependents)
  return _internal_mutable_dependents();
}
inline void employee::set_allocated_dependents(::differential_client::dependent_info* dependents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dependents_;
  }
  if (dependents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dependents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dependents, submessage_arena);
    }
    
  } else {
    
  }
  dependents_ = dependents;
  // @@protoc_insertion_point(field_set_allocated:differential_client.employee.dependents)
}

// double floatpoint = 8;
inline void employee::clear_floatpoint() {
  floatpoint_ = 0;
}
inline double employee::_internal_floatpoint() const {
  return floatpoint_;
}
inline double employee::floatpoint() const {
  // @@protoc_insertion_point(field_get:differential_client.employee.floatpoint)
  return _internal_floatpoint();
}
inline void employee::_internal_set_floatpoint(double value) {
  
  floatpoint_ = value;
}
inline void employee::set_floatpoint(double value) {
  _internal_set_floatpoint(value);
  // @@protoc_insertion_point(field_set:differential_client.employee.floatpoint)
}

// repeated .differential_client.field_set foo = 9;
inline int employee::_internal_foo_size() const {
  return foo_.size();
}
inline int employee::foo_size() const {
  return _internal_foo_size();
}
inline void employee::clear_foo() {
  foo_.Clear();
}
inline ::differential_client::field_set* employee::mutable_foo(int index) {
  // @@protoc_insertion_point(field_mutable:differential_client.employee.foo)
  return foo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differential_client::field_set >*
employee::mutable_foo() {
  // @@protoc_insertion_point(field_mutable_list:differential_client.employee.foo)
  return &foo_;
}
inline const ::differential_client::field_set& employee::_internal_foo(int index) const {
  return foo_.Get(index);
}
inline const ::differential_client::field_set& employee::foo(int index) const {
  // @@protoc_insertion_point(field_get:differential_client.employee.foo)
  return _internal_foo(index);
}
inline ::differential_client::field_set* employee::_internal_add_foo() {
  return foo_.Add();
}
inline ::differential_client::field_set* employee::add_foo() {
  // @@protoc_insertion_point(field_add:differential_client.employee.foo)
  return _internal_add_foo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::differential_client::field_set >&
employee::foo() const {
  // @@protoc_insertion_point(field_list:differential_client.employee.foo)
  return foo_;
}

// map<string, string> info = 10;
inline int employee::_internal_info_size() const {
  return info_.size();
}
inline int employee::info_size() const {
  return _internal_info_size();
}
inline void employee::clear_info() {
  info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
employee::_internal_info() const {
  return info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
employee::info() const {
  // @@protoc_insertion_point(field_map:differential_client.employee.info)
  return _internal_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
employee::_internal_mutable_info() {
  return info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
employee::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:differential_client.employee.info)
  return _internal_mutable_info();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace differential_client

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_differential_5fclient_2eproto
