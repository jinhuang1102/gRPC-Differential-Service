// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: differential_client.proto

#include "differential_client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_differential_5fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_company_differential_5fclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_differential_5fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dependent_info_differential_5fclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_differential_5fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_education_info_differential_5fclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_differential_5fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_employee_InfoEntry_DoNotUse_differential_5fclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_differential_5fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_field_set_differential_5fclient_2eproto;
namespace differential_client {
class companyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<company> _instance;
} _company_default_instance_;
class education_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<education_info> _instance;
} _education_info_default_instance_;
class dependent_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dependent_info> _instance;
} _dependent_info_default_instance_;
class field_setDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<field_set> _instance;
} _field_set_default_instance_;
class employee_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<employee_InfoEntry_DoNotUse> _instance;
} _employee_InfoEntry_DoNotUse_default_instance_;
class employeeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<employee> _instance;
} _employee_default_instance_;
}  // namespace differential_client
static void InitDefaultsscc_info_company_differential_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differential_client::_company_default_instance_;
    new (ptr) ::differential_client::company();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differential_client::company::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_company_differential_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_company_differential_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_dependent_info_differential_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differential_client::_dependent_info_default_instance_;
    new (ptr) ::differential_client::dependent_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differential_client::dependent_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dependent_info_differential_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_dependent_info_differential_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_education_info_differential_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differential_client::_education_info_default_instance_;
    new (ptr) ::differential_client::education_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differential_client::education_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_education_info_differential_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_education_info_differential_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_employee_differential_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differential_client::_employee_default_instance_;
    new (ptr) ::differential_client::employee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differential_client::employee::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_employee_differential_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_employee_differential_5fclient_2eproto}, {
      &scc_info_company_differential_5fclient_2eproto.base,
      &scc_info_education_info_differential_5fclient_2eproto.base,
      &scc_info_dependent_info_differential_5fclient_2eproto.base,
      &scc_info_field_set_differential_5fclient_2eproto.base,
      &scc_info_employee_InfoEntry_DoNotUse_differential_5fclient_2eproto.base,}};

static void InitDefaultsscc_info_employee_InfoEntry_DoNotUse_differential_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differential_client::_employee_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::differential_client::employee_InfoEntry_DoNotUse();
  }
  ::differential_client::employee_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_employee_InfoEntry_DoNotUse_differential_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_employee_InfoEntry_DoNotUse_differential_5fclient_2eproto}, {}};

static void InitDefaultsscc_info_field_set_differential_5fclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::differential_client::_field_set_default_instance_;
    new (ptr) ::differential_client::field_set();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::differential_client::field_set::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_field_set_differential_5fclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_field_set_differential_5fclient_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_differential_5fclient_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_differential_5fclient_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_differential_5fclient_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_differential_5fclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differential_client::company, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differential_client::company, name_),
  PROTOBUF_FIELD_OFFSET(::differential_client::company, occupation_),
  PROTOBUF_FIELD_OFFSET(::differential_client::company, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differential_client::education_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differential_client::education_info, name_),
  PROTOBUF_FIELD_OFFSET(::differential_client::education_info, degree_),
  PROTOBUF_FIELD_OFFSET(::differential_client::education_info, major_),
  PROTOBUF_FIELD_OFFSET(::differential_client::education_info, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differential_client::dependent_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differential_client::dependent_info, name_),
  PROTOBUF_FIELD_OFFSET(::differential_client::dependent_info, age_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differential_client::field_set, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differential_client::field_set, exam1_),
  PROTOBUF_FIELD_OFFSET(::differential_client::field_set, score1_),
  PROTOBUF_FIELD_OFFSET(::differential_client::field_set, exam2_),
  PROTOBUF_FIELD_OFFSET(::differential_client::field_set, score2_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee_InfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differential_client::employee_InfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::differential_client::employee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::differential_client::employee, employ_id_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee, fullname_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee, age_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee, employer_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee, areas_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee, education_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee, dependents_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee, floatpoint_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee, foo_),
  PROTOBUF_FIELD_OFFSET(::differential_client::employee, info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::differential_client::company)},
  { 8, -1, sizeof(::differential_client::education_info)},
  { 17, -1, sizeof(::differential_client::dependent_info)},
  { 24, -1, sizeof(::differential_client::field_set)},
  { 33, 40, sizeof(::differential_client::employee_InfoEntry_DoNotUse)},
  { 42, -1, sizeof(::differential_client::employee)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differential_client::_company_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differential_client::_education_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differential_client::_dependent_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differential_client::_field_set_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differential_client::_employee_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::differential_client::_employee_default_instance_),
};

const char descriptor_table_protodef_differential_5fclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031differential_client.proto\022\023differentia"
  "l_client\032\032differential_service.proto\"<\n\007"
  "company\022\014\n\004name\030\001 \001(\t\022\022\n\noccupation\030\002 \001("
  "\t\022\017\n\007address\030\003 \001(\t\"N\n\016education_info\022\014\n\004"
  "name\030\001 \001(\t\022\016\n\006degree\030\002 \001(\t\022\r\n\005major\030\003 \001("
  "\t\022\017\n\007address\030\004 \001(\t\"+\n\016dependent_info\022\014\n\004"
  "name\030\001 \003(\t\022\013\n\003age\030\002 \003(\005\"I\n\tfield_set\022\r\n\005"
  "exam1\030\001 \001(\t\022\016\n\006score1\030\002 \001(\005\022\r\n\005exam2\030\003 \001"
  "(\t\022\016\n\006score2\030\004 \001(\002\"\221\003\n\010employee\022\021\n\templo"
  "y_id\030\001 \001(\005\022\020\n\010fullname\030\002 \001(\t\022\013\n\003age\030\003 \001("
  "\005\022.\n\010employer\030\004 \001(\0132\034.differential_clien"
  "t.company\022\r\n\005areas\030\005 \003(\t\0226\n\teducation\030\006 "
  "\003(\0132#.differential_client.education_info"
  "\0227\n\ndependents\030\007 \001(\0132#.differential_clie"
  "nt.dependent_info\022\022\n\nfloatpoint\030\010 \001(\001\022+\n"
  "\003foo\030\t \003(\0132\036.differential_client.field_s"
  "et\0225\n\004info\030\n \003(\0132\'.differential_client.e"
  "mployee.InfoEntry\032+\n\tInfoEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_differential_5fclient_2eproto_deps[1] = {
  &::descriptor_table_differential_5fservice_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_differential_5fclient_2eproto_sccs[6] = {
  &scc_info_company_differential_5fclient_2eproto.base,
  &scc_info_dependent_info_differential_5fclient_2eproto.base,
  &scc_info_education_info_differential_5fclient_2eproto.base,
  &scc_info_employee_differential_5fclient_2eproto.base,
  &scc_info_employee_InfoEntry_DoNotUse_differential_5fclient_2eproto.base,
  &scc_info_field_set_differential_5fclient_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_differential_5fclient_2eproto_once;
static bool descriptor_table_differential_5fclient_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_differential_5fclient_2eproto = {
  &descriptor_table_differential_5fclient_2eproto_initialized, descriptor_table_protodef_differential_5fclient_2eproto, "differential_client.proto", 750,
  &descriptor_table_differential_5fclient_2eproto_once, descriptor_table_differential_5fclient_2eproto_sccs, descriptor_table_differential_5fclient_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_differential_5fclient_2eproto::offsets,
  file_level_metadata_differential_5fclient_2eproto, 6, file_level_enum_descriptors_differential_5fclient_2eproto, file_level_service_descriptors_differential_5fclient_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_differential_5fclient_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_differential_5fclient_2eproto), true);
namespace differential_client {

// ===================================================================

void company::InitAsDefaultInstance() {
}
class company::_Internal {
 public:
};

company::company()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differential_client.company)
}
company::company(const company& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  occupation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_occupation().empty()) {
    occupation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.occupation_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:differential_client.company)
}

void company::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_company_differential_5fclient_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occupation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

company::~company() {
  // @@protoc_insertion_point(destructor:differential_client.company)
  SharedDtor();
}

void company::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occupation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void company::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const company& company::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_company_differential_5fclient_2eproto.base);
  return *internal_default_instance();
}


void company::Clear() {
// @@protoc_insertion_point(message_clear_start:differential_client.company)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occupation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* company::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.company.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string occupation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_occupation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.company.occupation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.company.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* company::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differential_client.company)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.company.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string occupation = 2;
  if (this->occupation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_occupation().data(), static_cast<int>(this->_internal_occupation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.company.occupation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_occupation(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.company.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differential_client.company)
  return target;
}

size_t company::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differential_client.company)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string occupation = 2;
  if (this->occupation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_occupation());
  }

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void company::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differential_client.company)
  GOOGLE_DCHECK_NE(&from, this);
  const company* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<company>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differential_client.company)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differential_client.company)
    MergeFrom(*source);
  }
}

void company::MergeFrom(const company& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differential_client.company)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.occupation().size() > 0) {

    occupation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.occupation_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void company::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differential_client.company)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void company::CopyFrom(const company& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differential_client.company)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool company::IsInitialized() const {
  return true;
}

void company::InternalSwap(company* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  occupation_.Swap(&other->occupation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata company::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void education_info::InitAsDefaultInstance() {
}
class education_info::_Internal {
 public:
};

education_info::education_info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differential_client.education_info)
}
education_info::education_info(const education_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  degree_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_degree().empty()) {
    degree_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.degree_);
  }
  major_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_major().empty()) {
    major_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.major_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:differential_client.education_info)
}

void education_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_education_info_differential_5fclient_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  degree_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  major_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

education_info::~education_info() {
  // @@protoc_insertion_point(destructor:differential_client.education_info)
  SharedDtor();
}

void education_info::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  degree_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  major_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void education_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const education_info& education_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_education_info_differential_5fclient_2eproto.base);
  return *internal_default_instance();
}


void education_info::Clear() {
// @@protoc_insertion_point(message_clear_start:differential_client.education_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  degree_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  major_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* education_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.education_info.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string degree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_degree();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.education_info.degree"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string major = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_major();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.education_info.major"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.education_info.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* education_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differential_client.education_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.education_info.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string degree = 2;
  if (this->degree().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_degree().data(), static_cast<int>(this->_internal_degree().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.education_info.degree");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_degree(), target);
  }

  // string major = 3;
  if (this->major().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_major().data(), static_cast<int>(this->_internal_major().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.education_info.major");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_major(), target);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.education_info.address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differential_client.education_info)
  return target;
}

size_t education_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differential_client.education_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string degree = 2;
  if (this->degree().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_degree());
  }

  // string major = 3;
  if (this->major().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_major());
  }

  // string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void education_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differential_client.education_info)
  GOOGLE_DCHECK_NE(&from, this);
  const education_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<education_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differential_client.education_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differential_client.education_info)
    MergeFrom(*source);
  }
}

void education_info::MergeFrom(const education_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differential_client.education_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.degree().size() > 0) {

    degree_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.degree_);
  }
  if (from.major().size() > 0) {

    major_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.major_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void education_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differential_client.education_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void education_info::CopyFrom(const education_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differential_client.education_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool education_info::IsInitialized() const {
  return true;
}

void education_info::InternalSwap(education_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  degree_.Swap(&other->degree_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  major_.Swap(&other->major_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata education_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void dependent_info::InitAsDefaultInstance() {
}
class dependent_info::_Internal {
 public:
};

dependent_info::dependent_info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differential_client.dependent_info)
}
dependent_info::dependent_info(const dependent_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      name_(from.name_),
      age_(from.age_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:differential_client.dependent_info)
}

void dependent_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dependent_info_differential_5fclient_2eproto.base);
}

dependent_info::~dependent_info() {
  // @@protoc_insertion_point(destructor:differential_client.dependent_info)
  SharedDtor();
}

void dependent_info::SharedDtor() {
}

void dependent_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dependent_info& dependent_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dependent_info_differential_5fclient_2eproto.base);
  return *internal_default_instance();
}


void dependent_info::Clear() {
// @@protoc_insertion_point(message_clear_start:differential_client.dependent_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.Clear();
  age_.Clear();
  _internal_metadata_.Clear();
}

const char* dependent_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.dependent_info.name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_age(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_age(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dependent_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differential_client.dependent_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name = 1;
  for (int i = 0, n = this->_internal_name_size(); i < n; i++) {
    const auto& s = this->_internal_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.dependent_info.name");
    target = stream->WriteString(1, s, target);
  }

  // repeated int32 age = 2;
  {
    int byte_size = _age_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_age(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differential_client.dependent_info)
  return target;
}

size_t dependent_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differential_client.dependent_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_.size());
  for (int i = 0, n = name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_.Get(i));
  }

  // repeated int32 age = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->age_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _age_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dependent_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differential_client.dependent_info)
  GOOGLE_DCHECK_NE(&from, this);
  const dependent_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dependent_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differential_client.dependent_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differential_client.dependent_info)
    MergeFrom(*source);
  }
}

void dependent_info::MergeFrom(const dependent_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differential_client.dependent_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_.MergeFrom(from.name_);
  age_.MergeFrom(from.age_);
}

void dependent_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differential_client.dependent_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dependent_info::CopyFrom(const dependent_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differential_client.dependent_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dependent_info::IsInitialized() const {
  return true;
}

void dependent_info::InternalSwap(dependent_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.InternalSwap(&other->name_);
  age_.InternalSwap(&other->age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata dependent_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void field_set::InitAsDefaultInstance() {
}
class field_set::_Internal {
 public:
};

field_set::field_set()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differential_client.field_set)
}
field_set::field_set(const field_set& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exam1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exam1().empty()) {
    exam1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exam1_);
  }
  exam2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exam2().empty()) {
    exam2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exam2_);
  }
  ::memcpy(&score1_, &from.score1_,
    static_cast<size_t>(reinterpret_cast<char*>(&score2_) -
    reinterpret_cast<char*>(&score1_)) + sizeof(score2_));
  // @@protoc_insertion_point(copy_constructor:differential_client.field_set)
}

void field_set::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_field_set_differential_5fclient_2eproto.base);
  exam1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exam2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&score1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score2_) -
      reinterpret_cast<char*>(&score1_)) + sizeof(score2_));
}

field_set::~field_set() {
  // @@protoc_insertion_point(destructor:differential_client.field_set)
  SharedDtor();
}

void field_set::SharedDtor() {
  exam1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exam2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void field_set::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const field_set& field_set::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_field_set_differential_5fclient_2eproto.base);
  return *internal_default_instance();
}


void field_set::Clear() {
// @@protoc_insertion_point(message_clear_start:differential_client.field_set)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exam1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exam2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&score1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score2_) -
      reinterpret_cast<char*>(&score1_)) + sizeof(score2_));
  _internal_metadata_.Clear();
}

const char* field_set::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string exam1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_exam1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.field_set.exam1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exam2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_exam2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.field_set.exam2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          score2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* field_set::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differential_client.field_set)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exam1 = 1;
  if (this->exam1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exam1().data(), static_cast<int>(this->_internal_exam1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.field_set.exam1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exam1(), target);
  }

  // int32 score1 = 2;
  if (this->score1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score1(), target);
  }

  // string exam2 = 3;
  if (this->exam2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exam2().data(), static_cast<int>(this->_internal_exam2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.field_set.exam2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exam2(), target);
  }

  // float score2 = 4;
  if (!(this->score2() <= 0 && this->score2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_score2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differential_client.field_set)
  return target;
}

size_t field_set::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differential_client.field_set)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exam1 = 1;
  if (this->exam1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exam1());
  }

  // string exam2 = 3;
  if (this->exam2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exam2());
  }

  // int32 score1 = 2;
  if (this->score1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score1());
  }

  // float score2 = 4;
  if (!(this->score2() <= 0 && this->score2() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void field_set::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differential_client.field_set)
  GOOGLE_DCHECK_NE(&from, this);
  const field_set* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<field_set>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differential_client.field_set)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differential_client.field_set)
    MergeFrom(*source);
  }
}

void field_set::MergeFrom(const field_set& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differential_client.field_set)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exam1().size() > 0) {

    exam1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exam1_);
  }
  if (from.exam2().size() > 0) {

    exam2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exam2_);
  }
  if (from.score1() != 0) {
    _internal_set_score1(from._internal_score1());
  }
  if (!(from.score2() <= 0 && from.score2() >= 0)) {
    _internal_set_score2(from._internal_score2());
  }
}

void field_set::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differential_client.field_set)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void field_set::CopyFrom(const field_set& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differential_client.field_set)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_set::IsInitialized() const {
  return true;
}

void field_set::InternalSwap(field_set* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exam1_.Swap(&other->exam1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exam2_.Swap(&other->exam2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(score1_, other->score1_);
  swap(score2_, other->score2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata field_set::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

employee_InfoEntry_DoNotUse::employee_InfoEntry_DoNotUse() {}
employee_InfoEntry_DoNotUse::employee_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void employee_InfoEntry_DoNotUse::MergeFrom(const employee_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata employee_InfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void employee_InfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void employee::InitAsDefaultInstance() {
  ::differential_client::_employee_default_instance_._instance.get_mutable()->employer_ = const_cast< ::differential_client::company*>(
      ::differential_client::company::internal_default_instance());
  ::differential_client::_employee_default_instance_._instance.get_mutable()->dependents_ = const_cast< ::differential_client::dependent_info*>(
      ::differential_client::dependent_info::internal_default_instance());
}
class employee::_Internal {
 public:
  static const ::differential_client::company& employer(const employee* msg);
  static const ::differential_client::dependent_info& dependents(const employee* msg);
};

const ::differential_client::company&
employee::_Internal::employer(const employee* msg) {
  return *msg->employer_;
}
const ::differential_client::dependent_info&
employee::_Internal::dependents(const employee* msg) {
  return *msg->dependents_;
}
employee::employee()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:differential_client.employee)
}
employee::employee(const employee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      areas_(from.areas_),
      education_(from.education_),
      foo_(from.foo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fullname().empty()) {
    fullname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  if (from._internal_has_employer()) {
    employer_ = new ::differential_client::company(*from.employer_);
  } else {
    employer_ = nullptr;
  }
  if (from._internal_has_dependents()) {
    dependents_ = new ::differential_client::dependent_info(*from.dependents_);
  } else {
    dependents_ = nullptr;
  }
  ::memcpy(&employ_id_, &from.employ_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&floatpoint_) -
    reinterpret_cast<char*>(&employ_id_)) + sizeof(floatpoint_));
  // @@protoc_insertion_point(copy_constructor:differential_client.employee)
}

void employee::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_employee_differential_5fclient_2eproto.base);
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&employer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&floatpoint_) -
      reinterpret_cast<char*>(&employer_)) + sizeof(floatpoint_));
}

employee::~employee() {
  // @@protoc_insertion_point(destructor:differential_client.employee)
  SharedDtor();
}

void employee::SharedDtor() {
  fullname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete employer_;
  if (this != internal_default_instance()) delete dependents_;
}

void employee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const employee& employee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_employee_differential_5fclient_2eproto.base);
  return *internal_default_instance();
}


void employee::Clear() {
// @@protoc_insertion_point(message_clear_start:differential_client.employee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  areas_.Clear();
  education_.Clear();
  foo_.Clear();
  info_.Clear();
  fullname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && employer_ != nullptr) {
    delete employer_;
  }
  employer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dependents_ != nullptr) {
    delete dependents_;
  }
  dependents_ = nullptr;
  ::memset(&employ_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&floatpoint_) -
      reinterpret_cast<char*>(&employ_id_)) + sizeof(floatpoint_));
  _internal_metadata_.Clear();
}

const char* employee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 employ_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          employ_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fullname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fullname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.employee.fullname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 age = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .differential_client.company employer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_employer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string areas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_areas();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "differential_client.employee.areas"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .differential_client.education_info education = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_education(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .differential_client.dependent_info dependents = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependents(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double floatpoint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          floatpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .differential_client.field_set foo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_foo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* employee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:differential_client.employee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 employ_id = 1;
  if (this->employ_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_employ_id(), target);
  }

  // string fullname = 2;
  if (this->fullname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.employee.fullname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fullname(), target);
  }

  // int32 age = 3;
  if (this->age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_age(), target);
  }

  // .differential_client.company employer = 4;
  if (this->has_employer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::employer(this), target, stream);
  }

  // repeated string areas = 5;
  for (int i = 0, n = this->_internal_areas_size(); i < n; i++) {
    const auto& s = this->_internal_areas(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "differential_client.employee.areas");
    target = stream->WriteString(5, s, target);
  }

  // repeated .differential_client.education_info education = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_education_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_education(i), target, stream);
  }

  // .differential_client.dependent_info dependents = 7;
  if (this->has_dependents()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::dependents(this), target, stream);
  }

  // double floatpoint = 8;
  if (!(this->floatpoint() <= 0 && this->floatpoint() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_floatpoint(), target);
  }

  // repeated .differential_client.field_set foo = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_foo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_foo(i), target, stream);
  }

  // map<string, string> info = 10;
  if (!this->_internal_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "differential_client.employee.InfoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "differential_client.employee.InfoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_info().begin();
          it != this->_internal_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = employee_InfoEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_info().begin();
          it != this->_internal_info().end(); ++it) {
        target = employee_InfoEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:differential_client.employee)
  return target;
}

size_t employee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:differential_client.employee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string areas = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(areas_.size());
  for (int i = 0, n = areas_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      areas_.Get(i));
  }

  // repeated .differential_client.education_info education = 6;
  total_size += 1UL * this->_internal_education_size();
  for (const auto& msg : this->education_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .differential_client.field_set foo = 9;
  total_size += 1UL * this->_internal_foo_size();
  for (const auto& msg : this->foo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> info = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_info().begin();
      it != this->_internal_info().end(); ++it) {
    total_size += employee_InfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string fullname = 2;
  if (this->fullname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullname());
  }

  // .differential_client.company employer = 4;
  if (this->has_employer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *employer_);
  }

  // .differential_client.dependent_info dependents = 7;
  if (this->has_dependents()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dependents_);
  }

  // int32 employ_id = 1;
  if (this->employ_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_employ_id());
  }

  // int32 age = 3;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_age());
  }

  // double floatpoint = 8;
  if (!(this->floatpoint() <= 0 && this->floatpoint() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void employee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:differential_client.employee)
  GOOGLE_DCHECK_NE(&from, this);
  const employee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<employee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:differential_client.employee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:differential_client.employee)
    MergeFrom(*source);
  }
}

void employee::MergeFrom(const employee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:differential_client.employee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  areas_.MergeFrom(from.areas_);
  education_.MergeFrom(from.education_);
  foo_.MergeFrom(from.foo_);
  info_.MergeFrom(from.info_);
  if (from.fullname().size() > 0) {

    fullname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fullname_);
  }
  if (from.has_employer()) {
    _internal_mutable_employer()->::differential_client::company::MergeFrom(from._internal_employer());
  }
  if (from.has_dependents()) {
    _internal_mutable_dependents()->::differential_client::dependent_info::MergeFrom(from._internal_dependents());
  }
  if (from.employ_id() != 0) {
    _internal_set_employ_id(from._internal_employ_id());
  }
  if (from.age() != 0) {
    _internal_set_age(from._internal_age());
  }
  if (!(from.floatpoint() <= 0 && from.floatpoint() >= 0)) {
    _internal_set_floatpoint(from._internal_floatpoint());
  }
}

void employee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:differential_client.employee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void employee::CopyFrom(const employee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:differential_client.employee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool employee::IsInitialized() const {
  return true;
}

void employee::InternalSwap(employee* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  areas_.InternalSwap(&other->areas_);
  education_.InternalSwap(&other->education_);
  foo_.InternalSwap(&other->foo_);
  info_.Swap(&other->info_);
  fullname_.Swap(&other->fullname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(employer_, other->employer_);
  swap(dependents_, other->dependents_);
  swap(employ_id_, other->employ_id_);
  swap(age_, other->age_);
  swap(floatpoint_, other->floatpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata employee::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace differential_client
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::differential_client::company* Arena::CreateMaybeMessage< ::differential_client::company >(Arena* arena) {
  return Arena::CreateInternal< ::differential_client::company >(arena);
}
template<> PROTOBUF_NOINLINE ::differential_client::education_info* Arena::CreateMaybeMessage< ::differential_client::education_info >(Arena* arena) {
  return Arena::CreateInternal< ::differential_client::education_info >(arena);
}
template<> PROTOBUF_NOINLINE ::differential_client::dependent_info* Arena::CreateMaybeMessage< ::differential_client::dependent_info >(Arena* arena) {
  return Arena::CreateInternal< ::differential_client::dependent_info >(arena);
}
template<> PROTOBUF_NOINLINE ::differential_client::field_set* Arena::CreateMaybeMessage< ::differential_client::field_set >(Arena* arena) {
  return Arena::CreateInternal< ::differential_client::field_set >(arena);
}
template<> PROTOBUF_NOINLINE ::differential_client::employee_InfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::differential_client::employee_InfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::differential_client::employee_InfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::differential_client::employee* Arena::CreateMaybeMessage< ::differential_client::employee >(Arena* arena) {
  return Arena::CreateInternal< ::differential_client::employee >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
