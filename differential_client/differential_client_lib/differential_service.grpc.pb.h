// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: differential_service.proto
// Original file comments:
// The .proto file of the gRPC based Differential service
// File name: differential_service.proto
// Author: Jin Huang(jinhuangzheliu@google.com)
// Reviewers: xihan@google.com, Xuexuan@google.com, and wzong@google.com
// Last Update: 07/07/2020
//
#ifndef GRPC_differential_5fservice_2eproto__INCLUDED
#define GRPC_differential_5fservice_2eproto__INCLUDED

#include "differential_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace differentialservice {

class DifferentialServer final {
 public:
  static constexpr char const* service_full_name() {
    return "differentialservice.DifferentialServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Declare a method to check the connect between the client and server.
    // User use this method to send a query and receive a response from server.
    // This method was call by the stub of DifferentialServer.
    // User's query is passed by "message MsgRequest{ ... }" and
    // Server's response receive from "message MsgReply { ... }"
    // For example,
    //    class MessageWrite {
    //      public:
    //        std::string foo(...){
    //          ...
    //          differentialservice::MsgRequest request;
    //          request.set_request( ... );
    //          differentialservice::MsgReply reply;
    //          Status status = stub_->GetConnect(..., request, &reply);
    //          ...
    //        }
    //      private:
    //        std::unique_ptr<DifferentialServer::Stub> stub_;
    //    }
    virtual ::grpc::Status GetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::differentialservice::MsgReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::MsgReply>> AsyncGetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::MsgReply>>(AsyncGetConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::MsgReply>> PrepareAsyncGetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::MsgReply>>(PrepareAsyncGetConnectRaw(context, request, cq));
    }
    // Declare how to compare two user input messages as default by MessageDifferencer::Compare().
    // Users have to structure their message as "message log { ...}" defined below this file.
    // Similar to the previous method this method is called by stub of DifferentialServer and
    // passed "message log{}" and the differential result will output by "message result{}".
    // For example,
    //    class MessageWrite {
    //      public:
    //        std::string foo(...){
    //          ...
    //          differentialservice::log log_message;
    //          differentialservice::reslut res;
    //          Status status = stub_->DefaultDifferentialService( ..., log_message, res);
    //          ...
    //        }
    //      private:
    //        std::unique_ptr<DifferentialServer::Stub> stub_;
    //    }
    virtual ::grpc::Status DefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::differentialservice::result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>> AsyncDefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>>(AsyncDefaultDifferentialServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>> PrepareAsyncDefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>>(PrepareAsyncDefaultDifferentialServiceRaw(context, request, cq));
    }
    // Declare a customize differential service
    // 1. Add one/more ignore criteria.
    //    By setting the "ignoreCriteria user_ignore = 5;" in "message log {}",
    //    user can implement their customized ignore criteria.
    //    In "message ignoreCriteria{...}" user can select the flag to
    //    ignore or compare some specific fields. And also can ignore the field
    //    by regular expression.
    //
    // 2. Compare the repeated fields as LIST or SET.
    //    By setting "repeated repeatedFieldTuple repeated_field_list = 6",
    //    user can compare the specific repeated filed base-on List or Set.
    //    In "message repeatedFieldTuple{...}" user can set the treatAsFlag to
    //    compare the repeated field.
    //
    // 3. Compare the repeated fields as Map.
    //    By setting "repeated mapvalueTuple mapvaluecompare = 7;",
    //    user can compare the repeated field as a map-value pair.
    //
    //
    //
    // 5. Set the fraction and margin to float/double comparison.
    //    By setting "float_comparison fraction_margin = 8;"
    //    User could approximate the comparison of float/double number.
    virtual ::grpc::Status DifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::differentialservice::result* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>> AsyncDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>>(AsyncDifferentialServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>> PrepareAsyncDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>>(PrepareAsyncDifferentialServiceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Declare a method to check the connect between the client and server.
      // User use this method to send a query and receive a response from server.
      // This method was call by the stub of DifferentialServer.
      // User's query is passed by "message MsgRequest{ ... }" and
      // Server's response receive from "message MsgReply { ... }"
      // For example,
      //    class MessageWrite {
      //      public:
      //        std::string foo(...){
      //          ...
      //          differentialservice::MsgRequest request;
      //          request.set_request( ... );
      //          differentialservice::MsgReply reply;
      //          Status status = stub_->GetConnect(..., request, &reply);
      //          ...
      //        }
      //      private:
      //        std::unique_ptr<DifferentialServer::Stub> stub_;
      //    }
      virtual void GetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest* request, ::differentialservice::MsgReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::MsgReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest* request, ::differentialservice::MsgReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest* request, ::differentialservice::MsgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::MsgReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::MsgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Declare how to compare two user input messages as default by MessageDifferencer::Compare().
      // Users have to structure their message as "message log { ...}" defined below this file.
      // Similar to the previous method this method is called by stub of DifferentialServer and
      // passed "message log{}" and the differential result will output by "message result{}".
      // For example,
      //    class MessageWrite {
      //      public:
      //        std::string foo(...){
      //          ...
      //          differentialservice::log log_message;
      //          differentialservice::reslut res;
      //          Status status = stub_->DefaultDifferentialService( ..., log_message, res);
      //          ...
      //        }
      //      private:
      //        std::unique_ptr<DifferentialServer::Stub> stub_;
      //    }
      virtual void DefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DefaultDifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DefaultDifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DefaultDifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Declare a customize differential service
      // 1. Add one/more ignore criteria.
      //    By setting the "ignoreCriteria user_ignore = 5;" in "message log {}",
      //    user can implement their customized ignore criteria.
      //    In "message ignoreCriteria{...}" user can select the flag to
      //    ignore or compare some specific fields. And also can ignore the field
      //    by regular expression.
      //
      // 2. Compare the repeated fields as LIST or SET.
      //    By setting "repeated repeatedFieldTuple repeated_field_list = 6",
      //    user can compare the specific repeated filed base-on List or Set.
      //    In "message repeatedFieldTuple{...}" user can set the treatAsFlag to
      //    compare the repeated field.
      //
      // 3. Compare the repeated fields as Map.
      //    By setting "repeated mapvalueTuple mapvaluecompare = 7;",
      //    user can compare the repeated field as a map-value pair.
      //
      //
      //
      // 5. Set the fraction and margin to float/double comparison.
      //    By setting "float_comparison fraction_margin = 8;"
      //    User could approximate the comparison of float/double number.
      virtual void DifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::MsgReply>* AsyncGetConnectRaw(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::MsgReply>* PrepareAsyncGetConnectRaw(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>* AsyncDefaultDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>* PrepareAsyncDefaultDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>* AsyncDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::differentialservice::result>* PrepareAsyncDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::differentialservice::MsgReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::MsgReply>> AsyncGetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::MsgReply>>(AsyncGetConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::MsgReply>> PrepareAsyncGetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::MsgReply>>(PrepareAsyncGetConnectRaw(context, request, cq));
    }
    ::grpc::Status DefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::differentialservice::result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::result>> AsyncDefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::result>>(AsyncDefaultDifferentialServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::result>> PrepareAsyncDefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::result>>(PrepareAsyncDefaultDifferentialServiceRaw(context, request, cq));
    }
    ::grpc::Status DifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::differentialservice::result* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::result>> AsyncDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::result>>(AsyncDifferentialServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::result>> PrepareAsyncDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::differentialservice::result>>(PrepareAsyncDifferentialServiceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest* request, ::differentialservice::MsgReply* response, std::function<void(::grpc::Status)>) override;
      void GetConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::MsgReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest* request, ::differentialservice::MsgReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetConnect(::grpc::ClientContext* context, const ::differentialservice::MsgRequest* request, ::differentialservice::MsgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::MsgReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::MsgReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, std::function<void(::grpc::Status)>) override;
      void DefaultDifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DefaultDifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DefaultDifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DefaultDifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, std::function<void(::grpc::Status)>) override;
      void DifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DifferentialService(::grpc::ClientContext* context, const ::differentialservice::log* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DifferentialService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::differentialservice::result* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::differentialservice::MsgReply>* AsyncGetConnectRaw(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::differentialservice::MsgReply>* PrepareAsyncGetConnectRaw(::grpc::ClientContext* context, const ::differentialservice::MsgRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::differentialservice::result>* AsyncDefaultDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::differentialservice::result>* PrepareAsyncDefaultDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::differentialservice::result>* AsyncDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::differentialservice::result>* PrepareAsyncDifferentialServiceRaw(::grpc::ClientContext* context, const ::differentialservice::log& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetConnect_;
    const ::grpc::internal::RpcMethod rpcmethod_DefaultDifferentialService_;
    const ::grpc::internal::RpcMethod rpcmethod_DifferentialService_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Declare a method to check the connect between the client and server.
    // User use this method to send a query and receive a response from server.
    // This method was call by the stub of DifferentialServer.
    // User's query is passed by "message MsgRequest{ ... }" and
    // Server's response receive from "message MsgReply { ... }"
    // For example,
    //    class MessageWrite {
    //      public:
    //        std::string foo(...){
    //          ...
    //          differentialservice::MsgRequest request;
    //          request.set_request( ... );
    //          differentialservice::MsgReply reply;
    //          Status status = stub_->GetConnect(..., request, &reply);
    //          ...
    //        }
    //      private:
    //        std::unique_ptr<DifferentialServer::Stub> stub_;
    //    }
    virtual ::grpc::Status GetConnect(::grpc::ServerContext* context, const ::differentialservice::MsgRequest* request, ::differentialservice::MsgReply* response);
    // Declare how to compare two user input messages as default by MessageDifferencer::Compare().
    // Users have to structure their message as "message log { ...}" defined below this file.
    // Similar to the previous method this method is called by stub of DifferentialServer and
    // passed "message log{}" and the differential result will output by "message result{}".
    // For example,
    //    class MessageWrite {
    //      public:
    //        std::string foo(...){
    //          ...
    //          differentialservice::log log_message;
    //          differentialservice::reslut res;
    //          Status status = stub_->DefaultDifferentialService( ..., log_message, res);
    //          ...
    //        }
    //      private:
    //        std::unique_ptr<DifferentialServer::Stub> stub_;
    //    }
    virtual ::grpc::Status DefaultDifferentialService(::grpc::ServerContext* context, const ::differentialservice::log* request, ::differentialservice::result* response);
    // Declare a customize differential service
    // 1. Add one/more ignore criteria.
    //    By setting the "ignoreCriteria user_ignore = 5;" in "message log {}",
    //    user can implement their customized ignore criteria.
    //    In "message ignoreCriteria{...}" user can select the flag to
    //    ignore or compare some specific fields. And also can ignore the field
    //    by regular expression.
    //
    // 2. Compare the repeated fields as LIST or SET.
    //    By setting "repeated repeatedFieldTuple repeated_field_list = 6",
    //    user can compare the specific repeated filed base-on List or Set.
    //    In "message repeatedFieldTuple{...}" user can set the treatAsFlag to
    //    compare the repeated field.
    //
    // 3. Compare the repeated fields as Map.
    //    By setting "repeated mapvalueTuple mapvaluecompare = 7;",
    //    user can compare the repeated field as a map-value pair.
    //
    //
    //
    // 5. Set the fraction and margin to float/double comparison.
    //    By setting "float_comparison fraction_margin = 8;"
    //    User could approximate the comparison of float/double number.
    virtual ::grpc::Status DifferentialService(::grpc::ServerContext* context, const ::differentialservice::log* request, ::differentialservice::result* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConnect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnect(::grpc::ServerContext* /*context*/, const ::differentialservice::MsgRequest* /*request*/, ::differentialservice::MsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConnect(::grpc::ServerContext* context, ::differentialservice::MsgRequest* request, ::grpc::ServerAsyncResponseWriter< ::differentialservice::MsgReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DefaultDifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DefaultDifferentialService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DefaultDifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DefaultDifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDefaultDifferentialService(::grpc::ServerContext* context, ::differentialservice::log* request, ::grpc::ServerAsyncResponseWriter< ::differentialservice::result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DifferentialService() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDifferentialService(::grpc::ServerContext* context, ::differentialservice::log* request, ::grpc::ServerAsyncResponseWriter< ::differentialservice::result>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetConnect<WithAsyncMethod_DefaultDifferentialService<WithAsyncMethod_DifferentialService<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetConnect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::differentialservice::MsgRequest, ::differentialservice::MsgReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::differentialservice::MsgRequest* request, ::differentialservice::MsgReply* response) { return this->GetConnect(context, request, response); }));}
    void SetMessageAllocatorFor_GetConnect(
        ::grpc::experimental::MessageAllocator< ::differentialservice::MsgRequest, ::differentialservice::MsgReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::differentialservice::MsgRequest, ::differentialservice::MsgReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnect(::grpc::ServerContext* /*context*/, const ::differentialservice::MsgRequest* /*request*/, ::differentialservice::MsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::differentialservice::MsgRequest* /*request*/, ::differentialservice::MsgReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetConnect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::differentialservice::MsgRequest* /*request*/, ::differentialservice::MsgReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DefaultDifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DefaultDifferentialService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::differentialservice::log, ::differentialservice::result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::differentialservice::log* request, ::differentialservice::result* response) { return this->DefaultDifferentialService(context, request, response); }));}
    void SetMessageAllocatorFor_DefaultDifferentialService(
        ::grpc::experimental::MessageAllocator< ::differentialservice::log, ::differentialservice::result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::differentialservice::log, ::differentialservice::result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DefaultDifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DefaultDifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DefaultDifferentialService(
      ::grpc::CallbackServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DefaultDifferentialService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DifferentialService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::differentialservice::log, ::differentialservice::result>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::differentialservice::log* request, ::differentialservice::result* response) { return this->DifferentialService(context, request, response); }));}
    void SetMessageAllocatorFor_DifferentialService(
        ::grpc::experimental::MessageAllocator< ::differentialservice::log, ::differentialservice::result>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::differentialservice::log, ::differentialservice::result>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DifferentialService(
      ::grpc::CallbackServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DifferentialService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetConnect<ExperimentalWithCallbackMethod_DefaultDifferentialService<ExperimentalWithCallbackMethod_DifferentialService<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetConnect<ExperimentalWithCallbackMethod_DefaultDifferentialService<ExperimentalWithCallbackMethod_DifferentialService<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConnect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnect(::grpc::ServerContext* /*context*/, const ::differentialservice::MsgRequest* /*request*/, ::differentialservice::MsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DefaultDifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DefaultDifferentialService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DefaultDifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DefaultDifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DifferentialService() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConnect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnect(::grpc::ServerContext* /*context*/, const ::differentialservice::MsgRequest* /*request*/, ::differentialservice::MsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DefaultDifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DefaultDifferentialService() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DefaultDifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DefaultDifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDefaultDifferentialService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DifferentialService() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDifferentialService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetConnect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConnect(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConnect(::grpc::ServerContext* /*context*/, const ::differentialservice::MsgRequest* /*request*/, ::differentialservice::MsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetConnect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DefaultDifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DefaultDifferentialService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DefaultDifferentialService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DefaultDifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DefaultDifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DefaultDifferentialService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DefaultDifferentialService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DifferentialService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DifferentialService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DifferentialService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DifferentialService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConnect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::differentialservice::MsgRequest, ::differentialservice::MsgReply>(std::bind(&WithStreamedUnaryMethod_GetConnect<BaseClass>::StreamedGetConnect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConnect(::grpc::ServerContext* /*context*/, const ::differentialservice::MsgRequest* /*request*/, ::differentialservice::MsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::differentialservice::MsgRequest,::differentialservice::MsgReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DefaultDifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DefaultDifferentialService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::differentialservice::log, ::differentialservice::result>(std::bind(&WithStreamedUnaryMethod_DefaultDifferentialService<BaseClass>::StreamedDefaultDifferentialService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DefaultDifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DefaultDifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDefaultDifferentialService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::differentialservice::log,::differentialservice::result>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DifferentialService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DifferentialService() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::differentialservice::log, ::differentialservice::result>(std::bind(&WithStreamedUnaryMethod_DifferentialService<BaseClass>::StreamedDifferentialService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DifferentialService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DifferentialService(::grpc::ServerContext* /*context*/, const ::differentialservice::log* /*request*/, ::differentialservice::result* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDifferentialService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::differentialservice::log,::differentialservice::result>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetConnect<WithStreamedUnaryMethod_DefaultDifferentialService<WithStreamedUnaryMethod_DifferentialService<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetConnect<WithStreamedUnaryMethod_DefaultDifferentialService<WithStreamedUnaryMethod_DifferentialService<Service > > > StreamedService;
};
// The differential service support two methods to compare two message
// 1) as default or 2) with customization.
// To call service methods, user need to create a std::unique_ptr<DifferentialServer::Stub> stub_;
// in their channel with the specific server address and port number.
// For example,
//    class MessageWrite {
//      public:
//        explicit MessageWrite(const std::chared_ptr<Channel>& channel)
//                      : stub_(DifferentialServer::NewStub(channel)) {}
//
//      private:
//        std::unique_ptr<DifferentialServer::Stub> stub_;
//
//    int main(...) {
//        std::string target_str;    // Establish the gRPC channel with the port number.
//        target_str = "0.0.0.0:50053";

}  // namespace differentialservice


#endif  // GRPC_differential_5fservice_2eproto__INCLUDED
